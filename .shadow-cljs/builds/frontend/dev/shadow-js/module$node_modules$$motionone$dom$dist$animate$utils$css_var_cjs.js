["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@motionone/dom/dist/animate/utils/css-var.cjs.js"],"~:js","shadow$provide.module$node_modules$$motionone$dom$dist$animate$utils$css_var_cjs=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});var transforms=require(\"module$node_modules$$motionone$dom$dist$animate$utils$transforms_cjs\");const registeredProperties=new Set;exports.isCssVar=name=>name.startsWith(\"--\");exports.registerCssVariable=function(name){if(!registeredProperties.has(name)){registeredProperties.add(name);try{const {syntax,initialValue}=transforms.transformDefinitions.has(name)?\ntransforms.transformDefinitions.get(name):{};CSS.registerProperty({name,inherits:!1,syntax,initialValue})}catch(e){}}};exports.registeredProperties=registeredProperties}","~:source","shadow$provide[\"module$node_modules$$motionone$dom$dist$animate$utils$css_var_cjs\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar transforms = require('./transforms.cjs.js');\n\nconst isCssVar = (name) => name.startsWith(\"--\");\nconst registeredProperties = new Set();\nfunction registerCssVariable(name) {\n    if (registeredProperties.has(name))\n        return;\n    registeredProperties.add(name);\n    try {\n        const { syntax, initialValue } = transforms.transformDefinitions.has(name)\n            ? transforms.transformDefinitions.get(name)\n            : {};\n        CSS.registerProperty({\n            name,\n            inherits: false,\n            syntax,\n            initialValue,\n        });\n    }\n    catch (e) { }\n}\n\nexports.isCssVar = isCssVar;\nexports.registerCssVariable = registerCssVariable;\nexports.registeredProperties = registeredProperties;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$motionone$dom$dist$animate$utils$transforms_cjs","~$shadow.js"]],"~:properties",["^5",["isCssVar","initialValue","registerCssVariable","__esModule","name","value","registeredProperties","inherits","syntax"]],"~:compiled-at",1681642524793,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$motionone$dom$dist$animate$utils$css_var_cjs.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,iEAAA,CAAsF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG9HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAEA,KAAIC,WAAaN,OAAA,CAAQ,sEAAR,CAGjB,OAAMO,qBAAuB,IAAIC,GAmBjCN,QAAQO,CAAAA,QAAR,CApBkBC,IAADD,EAAUC,IAAKC,CAAAA,UAAL,CAAgB,IAAhB,CAqB3BT,QAAQU,CAAAA,mBAAR,CAnBAA,QAA4B,CAACF,IAAD,CAAO,CAC/B,GAAI,CAAAH,oBAAqBM,CAAAA,GAArB,CAAyBH,IAAzB,CAAJ,CAAA,CAEAH,oBAAqBO,CAAAA,GAArB,CAAyBJ,IAAzB,CACA,IAAI,CACA,MAAM,CAAEK,MAAF,CAAUC,YAAV,CAAA,CAA2BV,UAAWW,CAAAA,oBAAqBJ,CAAAA,GAAhC,CAAoCH,IAApC,CAAA;AAC3BJ,UAAWW,CAAAA,oBAAqBC,CAAAA,GAAhC,CAAoCR,IAApC,CAD2B,CAE3B,EACNS,IAAIC,CAAAA,gBAAJ,CAAqB,CACjBV,IADiB,CAEjBW,SAAU,CAAA,CAFO,CAGjBN,MAHiB,CAIjBC,YAJiB,CAArB,CAJA,CAWJ,MAAOM,CAAP,CAAU,EAdV,CAD+B,CAoBnCpB,QAAQK,CAAAA,oBAAR,CAA+BA,oBA7B+F;\",\n\"sources\":[\"node_modules/@motionone/dom/dist/animate/utils/css-var.cjs.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$motionone$dom$dist$animate$utils$css_var_cjs\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\nvar transforms = require('./transforms.cjs.js');\\n\\nconst isCssVar = (name) => name.startsWith(\\\"--\\\");\\nconst registeredProperties = new Set();\\nfunction registerCssVariable(name) {\\n    if (registeredProperties.has(name))\\n        return;\\n    registeredProperties.add(name);\\n    try {\\n        const { syntax, initialValue } = transforms.transformDefinitions.has(name)\\n            ? transforms.transformDefinitions.get(name)\\n            : {};\\n        CSS.registerProperty({\\n            name,\\n            inherits: false,\\n            syntax,\\n            initialValue,\\n        });\\n    }\\n    catch (e) { }\\n}\\n\\nexports.isCssVar = isCssVar;\\nexports.registerCssVariable = registerCssVariable;\\nexports.registeredProperties = registeredProperties;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"transforms\",\"registeredProperties\",\"Set\",\"isCssVar\",\"name\",\"startsWith\",\"registerCssVariable\",\"has\",\"add\",\"syntax\",\"initialValue\",\"transformDefinitions\",\"get\",\"CSS\",\"registerProperty\",\"inherits\",\"e\"]\n}\n"]