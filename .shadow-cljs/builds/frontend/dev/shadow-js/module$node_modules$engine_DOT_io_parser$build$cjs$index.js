["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/engine_DOT_io-parser/build/cjs/index.js"],"~:js","shadow$provide.module$node_modules$engine_DOT_io_parser$build$cjs$index=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.decodePayload=exports.decodePacket=exports.encodePayload=exports.encodePacket=exports.protocol=void 0;const encodePacket_js_1=require(\"module$node_modules$engine_DOT_io_parser$build$cjs$encodePacket_browser\");exports.encodePacket=encodePacket_js_1.default;const decodePacket_js_1=require(\"module$node_modules$engine_DOT_io_parser$build$cjs$decodePacket_browser\");\nexports.decodePacket=decodePacket_js_1.default;const SEPARATOR=String.fromCharCode(30);exports.encodePayload=(packets,callback)=>{const length=packets.length,encodedPackets=Array(length);let count=0;packets.forEach((packet,i)=>{(0,encodePacket_js_1.default)(packet,!1,encodedPacket=>{encodedPackets[i]=encodedPacket;++count===length&&callback(encodedPackets.join(SEPARATOR))})})};exports.decodePayload=(encodedPayload,binaryType)=>{encodedPayload=encodedPayload.split(SEPARATOR);const packets=[];for(let i=\n0;i<encodedPayload.length;i++){const decodedPacket=(0,decodePacket_js_1.default)(encodedPayload[i],binaryType);packets.push(decodedPacket);if(\"error\"===decodedPacket.type)break}return packets};exports.protocol=4}","~:source","shadow$provide[\"module$node_modules$engine_DOT_io_parser$build$cjs$index\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodePayload = exports.decodePacket = exports.encodePayload = exports.encodePacket = exports.protocol = void 0;\nconst encodePacket_js_1 = require(\"./encodePacket.js\");\nexports.encodePacket = encodePacket_js_1.default;\nconst decodePacket_js_1 = require(\"./decodePacket.js\");\nexports.decodePacket = decodePacket_js_1.default;\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\nconst encodePayload = (packets, callback) => {\n    // some packets may be added to the array while encoding, so the initial length must be saved\n    const length = packets.length;\n    const encodedPackets = new Array(length);\n    let count = 0;\n    packets.forEach((packet, i) => {\n        // force base64 encoding for binary packets\n        (0, encodePacket_js_1.default)(packet, false, encodedPacket => {\n            encodedPackets[i] = encodedPacket;\n            if (++count === length) {\n                callback(encodedPackets.join(SEPARATOR));\n            }\n        });\n    });\n};\nexports.encodePayload = encodePayload;\nconst decodePayload = (encodedPayload, binaryType) => {\n    const encodedPackets = encodedPayload.split(SEPARATOR);\n    const packets = [];\n    for (let i = 0; i < encodedPackets.length; i++) {\n        const decodedPacket = (0, decodePacket_js_1.default)(encodedPackets[i], binaryType);\n        packets.push(decodedPacket);\n        if (decodedPacket.type === \"error\") {\n            break;\n        }\n    }\n    return packets;\n};\nexports.decodePayload = decodePayload;\nexports.protocol = 4;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$engine_DOT_io_parser$build$cjs$decodePacket_browser","~$module$node_modules$engine_DOT_io_parser$build$cjs$encodePacket_browser"]],"~:properties",["^5",["protocol","__esModule","value","decodePacket","encodePacket","decodePayload","encodePayload"]],"~:compiled-at",1681642524927,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$engine_DOT_io_parser$build$cjs$index.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAErHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAQI,CAAAA,aAAR,CAAwBJ,OAAQK,CAAAA,YAAhC,CAA+CL,OAAQM,CAAAA,aAAvD,CAAuEN,OAAQO,CAAAA,YAA/E,CAA8FP,OAAQQ,CAAAA,QAAtG,CAAiH,IAAK,EACtH,OAAMC,kBAAoBX,OAAA,CAAQ,yEAAR,CAC1BE,QAAQO,CAAAA,YAAR,CAAuBE,iBAAkBC,CAAAA,OACzC,OAAMC,kBAAoBb,OAAA,CAAQ,yEAAR,CAC1BE;OAAQK,CAAAA,YAAR,CAAuBM,iBAAkBD,CAAAA,OACzC,OAAME,UAAYC,MAAOC,CAAAA,YAAP,CAAoB,EAApB,CAgBlBd,QAAQM,CAAAA,aAAR,CAfsB,CAACS,OAAD,CAAUC,QAAV,CAAAV,EAAuB,CAEzC,MAAMW,OAASF,OAAQE,CAAAA,MAAvB,CACMC,eAAqBC,KAAJ,CAAUF,MAAV,CACvB,KAAIG,MAAQ,CACZL,QAAQM,CAAAA,OAAR,CAAgB,CAACC,MAAD,CAASC,CAAT,CAAA,EAAe,CAE3B,GAAId,iBAAkBC,CAAAA,OAAtB,EAA+BY,MAA/B,CAAuC,CAAA,CAAvC,CAA8CE,aAAA,EAAiB,CAC3DN,cAAA,CAAeK,CAAf,CAAA,CAAoBC,aAChB,GAAEJ,KAAN,GAAgBH,MAAhB,EACID,QAAA,CAASE,cAAeO,CAAAA,IAAf,CAAoBb,SAApB,CAAT,CAHuD,CAA/D,CAF2B,CAA/B,CALyC,CA4B7CZ,QAAQI,CAAAA,aAAR,CAZsB,CAACsB,cAAD,CAAiBC,UAAjB,CAAAvB,EAAgC,CAC5Cc,cAAAA,CAAiBQ,cAAeE,CAAAA,KAAf,CAAqBhB,SAArB,CACvB,OAAMG,QAAU,EAChB,KAAK,IAAIQ;AAAI,CAAb,CAAgBA,CAAhB,CAAoBL,cAAeD,CAAAA,MAAnC,CAA2CM,CAAA,EAA3C,CAAgD,CAC5C,MAAMM,cAAgB,GAAIlB,iBAAkBD,CAAAA,OAAtB,EAA+BQ,cAAA,CAAeK,CAAf,CAA/B,CAAkDI,UAAlD,CACtBZ,QAAQe,CAAAA,IAAR,CAAaD,aAAb,CACA,IAA2B,OAA3B,GAAIA,aAAcE,CAAAA,IAAlB,CACI,KAJwC,CAOhD,MAAOhB,QAV2C,CAatDf,QAAQQ,CAAAA,QAAR,CAAmB,CAtCkG;\",\n\"sources\":[\"node_modules/engine_DOT_io-parser/build/cjs/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$engine_DOT_io_parser$build$cjs$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.decodePayload = exports.decodePacket = exports.encodePayload = exports.encodePacket = exports.protocol = void 0;\\nconst encodePacket_js_1 = require(\\\"./encodePacket.js\\\");\\nexports.encodePacket = encodePacket_js_1.default;\\nconst decodePacket_js_1 = require(\\\"./decodePacket.js\\\");\\nexports.decodePacket = decodePacket_js_1.default;\\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\\nconst encodePayload = (packets, callback) => {\\n    // some packets may be added to the array while encoding, so the initial length must be saved\\n    const length = packets.length;\\n    const encodedPackets = new Array(length);\\n    let count = 0;\\n    packets.forEach((packet, i) => {\\n        // force base64 encoding for binary packets\\n        (0, encodePacket_js_1.default)(packet, false, encodedPacket => {\\n            encodedPackets[i] = encodedPacket;\\n            if (++count === length) {\\n                callback(encodedPackets.join(SEPARATOR));\\n            }\\n        });\\n    });\\n};\\nexports.encodePayload = encodePayload;\\nconst decodePayload = (encodedPayload, binaryType) => {\\n    const encodedPackets = encodedPayload.split(SEPARATOR);\\n    const packets = [];\\n    for (let i = 0; i < encodedPackets.length; i++) {\\n        const decodedPacket = (0, decodePacket_js_1.default)(encodedPackets[i], binaryType);\\n        packets.push(decodedPacket);\\n        if (decodedPacket.type === \\\"error\\\") {\\n            break;\\n        }\\n    }\\n    return packets;\\n};\\nexports.decodePayload = decodePayload;\\nexports.protocol = 4;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"decodePayload\",\"decodePacket\",\"encodePayload\",\"encodePacket\",\"protocol\",\"encodePacket_js_1\",\"default\",\"decodePacket_js_1\",\"SEPARATOR\",\"String\",\"fromCharCode\",\"packets\",\"callback\",\"length\",\"encodedPackets\",\"Array\",\"count\",\"forEach\",\"packet\",\"i\",\"encodedPacket\",\"join\",\"encodedPayload\",\"binaryType\",\"split\",\"decodedPacket\",\"push\",\"type\"]\n}\n"]