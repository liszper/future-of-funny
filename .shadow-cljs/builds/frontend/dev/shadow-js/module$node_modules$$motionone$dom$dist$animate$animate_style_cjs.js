["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@motionone/dom/dist/animate/animate-style.cjs.js"],"~:js","shadow$provide.module$node_modules$$motionone$dom$dist$animate$animate_style_cjs=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});var data=require(\"module$node_modules$$motionone$dom$dist$animate$data_cjs\"),cssVar=require(\"module$node_modules$$motionone$dom$dist$animate$utils$css_var_cjs\"),animation=require(\"module$node_modules$$motionone$animation$dist$index_cjs\"),utils=require(\"module$node_modules$$motionone$utils$dist$index_cjs\"),transforms=require(\"module$node_modules$$motionone$dom$dist$animate$utils$transforms_cjs\"),\neasing=require(\"module$node_modules$$motionone$dom$dist$animate$utils$easing_cjs\"),featureDetection=require(\"module$node_modules$$motionone$dom$dist$animate$utils$feature_detection_cjs\"),keyframes=require(\"module$node_modules$$motionone$dom$dist$animate$utils$keyframes_cjs\"),style=require(\"module$node_modules$$motionone$dom$dist$animate$style_cjs\"),getStyleName=require(\"module$node_modules$$motionone$dom$dist$animate$utils$get_style_name_cjs\"),stopAnimation=require(\"module$node_modules$$motionone$dom$dist$animate$utils$stop_animation_cjs\");\nexports.animateStyle=function(element,key,keyframesDefinition,options={}){const record=window.__MOTION_DEV_TOOLS_RECORD,isRecording=!1!==options.record&&record;let animation$1,{duration=utils.defaults.duration,delay=utils.defaults.delay,endDelay=utils.defaults.endDelay,repeat=utils.defaults.repeat,easing:easing$1=utils.defaults.easing,direction,offset,allowWebkitAcceleration=!1}=options;const data$1=data.getAnimationData(element);let canAnimateNatively=featureDetection.supports.waapi();const valueIsTransform=\ntransforms.isTransform(key);valueIsTransform&&transforms.addTransformToElement(element,key);const name=getStyleName.getStyleName(key),motionValue=data.getMotionValue(data$1.values,name),definition=transforms.transformDefinitions.get(name);stopAnimation.stopAnimation(motionValue.animation,!(utils.isEasingGenerator(easing$1)&&motionValue.generator)&&!1!==options.record);return()=>{var readInitialValue=()=>{var _a,_b;return null!==(_b=null!==(_a=style.style.get(element,name))&&void 0!==_a?_a:null===\ndefinition||void 0===definition?void 0:definition.initialValue)&&void 0!==_b?_b:0};let keyframes$1=keyframes.hydrateKeyframes(keyframes.keyframesList(keyframesDefinition),readInitialValue);if(utils.isEasingGenerator(easing$1)){const custom=easing$1.createAnimation(keyframes$1,readInitialValue,valueIsTransform,name,motionValue);easing$1=custom.easing;void 0!==custom.keyframes&&(keyframes$1=custom.keyframes);void 0!==custom.duration&&(duration=custom.duration)}cssVar.isCssVar(name)&&(featureDetection.supports.cssRegisterProperty()?\ncssVar.registerCssVariable(name):canAnimateNatively=!1);if(canAnimateNatively){definition&&(keyframes$1=keyframes$1.map(value=>utils.isNumber(value)?definition.toDefaultUnit(value):value));1!==keyframes$1.length||featureDetection.supports.partialKeyframes()&&!isRecording||keyframes$1.unshift(readInitialValue());readInitialValue={delay:utils.time.ms(delay),duration:utils.time.ms(duration),endDelay:utils.time.ms(endDelay),easing:utils.isEasingList(easing$1)?void 0:easing.convertEasing(easing$1),direction,\niterations:repeat+1,fill:\"both\"};animation$1=element.animate({[name]:keyframes$1,offset,easing:utils.isEasingList(easing$1)?easing$1.map(easing.convertEasing):void 0},readInitialValue);animation$1.finished||(animation$1.finished=new Promise((resolve,reject)=>{animation$1.onfinish=resolve;animation$1.oncancel=reject}));const target=keyframes$1[keyframes$1.length-1];animation$1.finished.then(()=>{style.style.set(element,name,target);animation$1.cancel()}).catch(utils.noop);allowWebkitAcceleration||\n(animation$1.playbackRate=1.000001)}else valueIsTransform?(keyframes$1=keyframes$1.map(value=>\"string\"===typeof value?parseFloat(value):value),1===keyframes$1.length&&keyframes$1.unshift(parseFloat(readInitialValue())),animation$1=new animation.Animation(latest=>{definition&&(latest=definition.toDefaultUnit(latest));style.style.set(element,name,latest)},keyframes$1,Object.assign(Object.assign({},options),{duration,easing:easing$1}))):(readInitialValue=keyframes$1[keyframes$1.length-1],style.style.set(element,\nname,definition&&utils.isNumber(readInitialValue)?definition.toDefaultUnit(readInitialValue):readInitialValue));isRecording&&record(element,key,keyframes$1,{duration,delay,easing:easing$1,repeat,offset},\"motion-one\");motionValue.setAnimation(animation$1);return animation$1}}}","~:source","shadow$provide[\"module$node_modules$$motionone$dom$dist$animate$animate_style_cjs\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar data = require('./data.cjs.js');\nvar cssVar = require('./utils/css-var.cjs.js');\nvar animation = require('@motionone/animation');\nvar utils = require('@motionone/utils');\nvar transforms = require('./utils/transforms.cjs.js');\nvar easing = require('./utils/easing.cjs.js');\nvar featureDetection = require('./utils/feature-detection.cjs.js');\nvar keyframes = require('./utils/keyframes.cjs.js');\nvar style = require('./style.cjs.js');\nvar getStyleName = require('./utils/get-style-name.cjs.js');\nvar stopAnimation = require('./utils/stop-animation.cjs.js');\n\nfunction getDevToolsRecord() {\n    return window.__MOTION_DEV_TOOLS_RECORD;\n}\nfunction animateStyle(element, key, keyframesDefinition, options = {}) {\n    const record = getDevToolsRecord();\n    const isRecording = options.record !== false && record;\n    let animation$1;\n    let { duration = utils.defaults.duration, delay = utils.defaults.delay, endDelay = utils.defaults.endDelay, repeat = utils.defaults.repeat, easing: easing$1 = utils.defaults.easing, direction, offset, allowWebkitAcceleration = false, } = options;\n    const data$1 = data.getAnimationData(element);\n    let canAnimateNatively = featureDetection.supports.waapi();\n    const valueIsTransform = transforms.isTransform(key);\n    /**\n     * If this is an individual transform, we need to map its\n     * key to a CSS variable and update the element's transform style\n     */\n    valueIsTransform && transforms.addTransformToElement(element, key);\n    const name = getStyleName.getStyleName(key);\n    const motionValue = data.getMotionValue(data$1.values, name);\n    /**\n     * Get definition of value, this will be used to convert numerical\n     * keyframes into the default value type.\n     */\n    const definition = transforms.transformDefinitions.get(name);\n    /**\n     * Stop the current animation, if any. Because this will trigger\n     * commitStyles (DOM writes) and we might later trigger DOM reads,\n     * this is fired now and we return a factory function to create\n     * the actual animation that can get called in batch,\n     */\n    stopAnimation.stopAnimation(motionValue.animation, !(utils.isEasingGenerator(easing$1) && motionValue.generator) &&\n        options.record !== false);\n    /**\n     * Batchable factory function containing all DOM reads.\n     */\n    return () => {\n        const readInitialValue = () => { var _a, _b; return (_b = (_a = style.style.get(element, name)) !== null && _a !== void 0 ? _a : definition === null || definition === void 0 ? void 0 : definition.initialValue) !== null && _b !== void 0 ? _b : 0; };\n        /**\n         * Replace null values with the previous keyframe value, or read\n         * it from the DOM if it's the first keyframe.\n         */\n        let keyframes$1 = keyframes.hydrateKeyframes(keyframes.keyframesList(keyframesDefinition), readInitialValue);\n        if (utils.isEasingGenerator(easing$1)) {\n            const custom = easing$1.createAnimation(keyframes$1, readInitialValue, valueIsTransform, name, motionValue);\n            easing$1 = custom.easing;\n            if (custom.keyframes !== undefined)\n                keyframes$1 = custom.keyframes;\n            if (custom.duration !== undefined)\n                duration = custom.duration;\n        }\n        /**\n         * If this is a CSS variable we need to register it with the browser\n         * before it can be animated natively. We also set it with setProperty\n         * rather than directly onto the element.style object.\n         */\n        if (cssVar.isCssVar(name)) {\n            if (featureDetection.supports.cssRegisterProperty()) {\n                cssVar.registerCssVariable(name);\n            }\n            else {\n                canAnimateNatively = false;\n            }\n        }\n        /**\n         * If we can animate this value with WAAPI, do so. Currently this only\n         * feature detects CSS.registerProperty but could check WAAPI too.\n         */\n        if (canAnimateNatively) {\n            /**\n             * Convert numbers to default value types. Currently this only supports\n             * transforms but it could also support other value types.\n             */\n            if (definition) {\n                keyframes$1 = keyframes$1.map((value) => utils.isNumber(value) ? definition.toDefaultUnit(value) : value);\n            }\n            /**\n             * If this browser doesn't support partial/implicit keyframes we need to\n             * explicitly provide one.\n             */\n            if (keyframes$1.length === 1 &&\n                (!featureDetection.supports.partialKeyframes() || isRecording)) {\n                keyframes$1.unshift(readInitialValue());\n            }\n            const animationOptions = {\n                delay: utils.time.ms(delay),\n                duration: utils.time.ms(duration),\n                endDelay: utils.time.ms(endDelay),\n                easing: !utils.isEasingList(easing$1) ? easing.convertEasing(easing$1) : undefined,\n                direction,\n                iterations: repeat + 1,\n                fill: \"both\",\n            };\n            animation$1 = element.animate({\n                [name]: keyframes$1,\n                offset,\n                easing: utils.isEasingList(easing$1) ? easing$1.map(easing.convertEasing) : undefined,\n            }, animationOptions);\n            /**\n             * Polyfill finished Promise in browsers that don't support it\n             */\n            if (!animation$1.finished) {\n                animation$1.finished = new Promise((resolve, reject) => {\n                    animation$1.onfinish = resolve;\n                    animation$1.oncancel = reject;\n                });\n            }\n            const target = keyframes$1[keyframes$1.length - 1];\n            animation$1.finished\n                .then(() => {\n                // Apply styles to target\n                style.style.set(element, name, target);\n                // Ensure fill modes don't persist\n                animation$1.cancel();\n            })\n                .catch(utils.noop);\n            /**\n             * This forces Webkit to run animations on the main thread by exploiting\n             * this condition:\n             * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/graphics/ca/GraphicsLayerCA.cpp?rev=281238#L1099\n             *\n             * This fixes Webkit's timing bugs, like accelerated animations falling\n             * out of sync with main thread animations and massive delays in starting\n             * accelerated animations in WKWebView.\n             */\n            if (!allowWebkitAcceleration)\n                animation$1.playbackRate = 1.000001;\n            /**\n             * If we can't animate the value natively then we can fallback to the numbers-only\n             * polyfill for transforms.\n             */\n        }\n        else if (valueIsTransform) {\n            /**\n             * If any keyframe is a string (because we measured it from the DOM), we need to convert\n             * it into a number before passing to the Animation polyfill.\n             */\n            keyframes$1 = keyframes$1.map((value) => typeof value === \"string\" ? parseFloat(value) : value);\n            /**\n             * If we only have a single keyframe, we need to create an initial keyframe by reading\n             * the current value from the DOM.\n             */\n            if (keyframes$1.length === 1) {\n                keyframes$1.unshift(parseFloat(readInitialValue()));\n            }\n            const render = (latest) => {\n                if (definition)\n                    latest = definition.toDefaultUnit(latest);\n                style.style.set(element, name, latest);\n            };\n            animation$1 = new animation.Animation(render, keyframes$1, Object.assign(Object.assign({}, options), { duration,\n                easing: easing$1 }));\n        }\n        else {\n            const target = keyframes$1[keyframes$1.length - 1];\n            style.style.set(element, name, definition && utils.isNumber(target)\n                ? definition.toDefaultUnit(target)\n                : target);\n        }\n        if (isRecording) {\n            record(element, key, keyframes$1, {\n                duration,\n                delay: delay,\n                easing: easing$1,\n                repeat,\n                offset,\n            }, \"motion-one\");\n        }\n        motionValue.setAnimation(animation$1);\n        return animation$1;\n    };\n}\n\nexports.animateStyle = animateStyle;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$motionone$dom$dist$animate$utils$transforms_cjs","~$module$node_modules$$motionone$dom$dist$animate$style_cjs","~$module$node_modules$$motionone$dom$dist$animate$utils$get_style_name_cjs","~$module$node_modules$$motionone$dom$dist$animate$utils$css_var_cjs","~$module$node_modules$$motionone$dom$dist$animate$data_cjs","~$shadow.js","~$module$node_modules$$motionone$utils$dist$index_cjs","~$module$node_modules$$motionone$dom$dist$animate$utils$keyframes_cjs","~$module$node_modules$$motionone$animation$dist$index_cjs","~$module$node_modules$$motionone$dom$dist$animate$utils$stop_animation_cjs","~$module$node_modules$$motionone$dom$dist$animate$utils$easing_cjs","~$module$node_modules$$motionone$dom$dist$animate$utils$feature_detection_cjs"]],"~:properties",["^5",["easing","offset","repeat","__esModule","iterations","playbackRate","value","direction","fill","animateStyle","endDelay","duration","delay","onfinish","oncancel","finished"]],"~:compiled-at",1681642524796,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$motionone$dom$dist$animate$animate_style_cjs.js\",\n\"lineCount\":9,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@motionone/dom/dist/animate/animate-style.cjs.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$motionone$dom$dist$animate$animate_style_cjs\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\nvar data = require('./data.cjs.js');\\nvar cssVar = require('./utils/css-var.cjs.js');\\nvar animation = require('@motionone/animation');\\nvar utils = require('@motionone/utils');\\nvar transforms = require('./utils/transforms.cjs.js');\\nvar easing = require('./utils/easing.cjs.js');\\nvar featureDetection = require('./utils/feature-detection.cjs.js');\\nvar keyframes = require('./utils/keyframes.cjs.js');\\nvar style = require('./style.cjs.js');\\nvar getStyleName = require('./utils/get-style-name.cjs.js');\\nvar stopAnimation = require('./utils/stop-animation.cjs.js');\\n\\nfunction getDevToolsRecord() {\\n    return window.__MOTION_DEV_TOOLS_RECORD;\\n}\\nfunction animateStyle(element, key, keyframesDefinition, options = {}) {\\n    const record = getDevToolsRecord();\\n    const isRecording = options.record !== false && record;\\n    let animation$1;\\n    let { duration = utils.defaults.duration, delay = utils.defaults.delay, endDelay = utils.defaults.endDelay, repeat = utils.defaults.repeat, easing: easing$1 = utils.defaults.easing, direction, offset, allowWebkitAcceleration = false, } = options;\\n    const data$1 = data.getAnimationData(element);\\n    let canAnimateNatively = featureDetection.supports.waapi();\\n    const valueIsTransform = transforms.isTransform(key);\\n    /**\\n     * If this is an individual transform, we need to map its\\n     * key to a CSS variable and update the element's transform style\\n     */\\n    valueIsTransform && transforms.addTransformToElement(element, key);\\n    const name = getStyleName.getStyleName(key);\\n    const motionValue = data.getMotionValue(data$1.values, name);\\n    /**\\n     * Get definition of value, this will be used to convert numerical\\n     * keyframes into the default value type.\\n     */\\n    const definition = transforms.transformDefinitions.get(name);\\n    /**\\n     * Stop the current animation, if any. Because this will trigger\\n     * commitStyles (DOM writes) and we might later trigger DOM reads,\\n     * this is fired now and we return a factory function to create\\n     * the actual animation that can get called in batch,\\n     */\\n    stopAnimation.stopAnimation(motionValue.animation, !(utils.isEasingGenerator(easing$1) && motionValue.generator) &&\\n        options.record !== false);\\n    /**\\n     * Batchable factory function containing all DOM reads.\\n     */\\n    return () => {\\n        const readInitialValue = () => { var _a, _b; return (_b = (_a = style.style.get(element, name)) !== null && _a !== void 0 ? _a : definition === null || definition === void 0 ? void 0 : definition.initialValue) !== null && _b !== void 0 ? _b : 0; };\\n        /**\\n         * Replace null values with the previous keyframe value, or read\\n         * it from the DOM if it's the first keyframe.\\n         */\\n        let keyframes$1 = keyframes.hydrateKeyframes(keyframes.keyframesList(keyframesDefinition), readInitialValue);\\n        if (utils.isEasingGenerator(easing$1)) {\\n            const custom = easing$1.createAnimation(keyframes$1, readInitialValue, valueIsTransform, name, motionValue);\\n            easing$1 = custom.easing;\\n            if (custom.keyframes !== undefined)\\n                keyframes$1 = custom.keyframes;\\n            if (custom.duration !== undefined)\\n                duration = custom.duration;\\n        }\\n        /**\\n         * If this is a CSS variable we need to register it with the browser\\n         * before it can be animated natively. We also set it with setProperty\\n         * rather than directly onto the element.style object.\\n         */\\n        if (cssVar.isCssVar(name)) {\\n            if (featureDetection.supports.cssRegisterProperty()) {\\n                cssVar.registerCssVariable(name);\\n            }\\n            else {\\n                canAnimateNatively = false;\\n            }\\n        }\\n        /**\\n         * If we can animate this value with WAAPI, do so. Currently this only\\n         * feature detects CSS.registerProperty but could check WAAPI too.\\n         */\\n        if (canAnimateNatively) {\\n            /**\\n             * Convert numbers to default value types. Currently this only supports\\n             * transforms but it could also support other value types.\\n             */\\n            if (definition) {\\n                keyframes$1 = keyframes$1.map((value) => utils.isNumber(value) ? definition.toDefaultUnit(value) : value);\\n            }\\n            /**\\n             * If this browser doesn't support partial/implicit keyframes we need to\\n             * explicitly provide one.\\n             */\\n            if (keyframes$1.length === 1 &&\\n                (!featureDetection.supports.partialKeyframes() || isRecording)) {\\n                keyframes$1.unshift(readInitialValue());\\n            }\\n            const animationOptions = {\\n                delay: utils.time.ms(delay),\\n                duration: utils.time.ms(duration),\\n                endDelay: utils.time.ms(endDelay),\\n                easing: !utils.isEasingList(easing$1) ? easing.convertEasing(easing$1) : undefined,\\n                direction,\\n                iterations: repeat + 1,\\n                fill: \\\"both\\\",\\n            };\\n            animation$1 = element.animate({\\n                [name]: keyframes$1,\\n                offset,\\n                easing: utils.isEasingList(easing$1) ? easing$1.map(easing.convertEasing) : undefined,\\n            }, animationOptions);\\n            /**\\n             * Polyfill finished Promise in browsers that don't support it\\n             */\\n            if (!animation$1.finished) {\\n                animation$1.finished = new Promise((resolve, reject) => {\\n                    animation$1.onfinish = resolve;\\n                    animation$1.oncancel = reject;\\n                });\\n            }\\n            const target = keyframes$1[keyframes$1.length - 1];\\n            animation$1.finished\\n                .then(() => {\\n                // Apply styles to target\\n                style.style.set(element, name, target);\\n                // Ensure fill modes don't persist\\n                animation$1.cancel();\\n            })\\n                .catch(utils.noop);\\n            /**\\n             * This forces Webkit to run animations on the main thread by exploiting\\n             * this condition:\\n             * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/graphics/ca/GraphicsLayerCA.cpp?rev=281238#L1099\\n             *\\n             * This fixes Webkit's timing bugs, like accelerated animations falling\\n             * out of sync with main thread animations and massive delays in starting\\n             * accelerated animations in WKWebView.\\n             */\\n            if (!allowWebkitAcceleration)\\n                animation$1.playbackRate = 1.000001;\\n            /**\\n             * If we can't animate the value natively then we can fallback to the numbers-only\\n             * polyfill for transforms.\\n             */\\n        }\\n        else if (valueIsTransform) {\\n            /**\\n             * If any keyframe is a string (because we measured it from the DOM), we need to convert\\n             * it into a number before passing to the Animation polyfill.\\n             */\\n            keyframes$1 = keyframes$1.map((value) => typeof value === \\\"string\\\" ? parseFloat(value) : value);\\n            /**\\n             * If we only have a single keyframe, we need to create an initial keyframe by reading\\n             * the current value from the DOM.\\n             */\\n            if (keyframes$1.length === 1) {\\n                keyframes$1.unshift(parseFloat(readInitialValue()));\\n            }\\n            const render = (latest) => {\\n                if (definition)\\n                    latest = definition.toDefaultUnit(latest);\\n                style.style.set(element, name, latest);\\n            };\\n            animation$1 = new animation.Animation(render, keyframes$1, Object.assign(Object.assign({}, options), { duration,\\n                easing: easing$1 }));\\n        }\\n        else {\\n            const target = keyframes$1[keyframes$1.length - 1];\\n            style.style.set(element, name, definition && utils.isNumber(target)\\n                ? definition.toDefaultUnit(target)\\n                : target);\\n        }\\n        if (isRecording) {\\n            record(element, key, keyframes$1, {\\n                duration,\\n                delay: delay,\\n                easing: easing$1,\\n                repeat,\\n                offset,\\n            }, \\\"motion-one\\\");\\n        }\\n        motionValue.setAnimation(animation$1);\\n        return animation$1;\\n    };\\n}\\n\\nexports.animateStyle = animateStyle;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"data\",\"cssVar\",\"animation\",\"utils\",\"transforms\",\"easing\",\"featureDetection\",\"keyframes\",\"style\",\"getStyleName\",\"stopAnimation\",\"animateStyle\",\"element\",\"key\",\"keyframesDefinition\",\"options\",\"record\",\"window\",\"__MOTION_DEV_TOOLS_RECORD\",\"isRecording\",\"animation$1\",\"duration\",\"defaults\",\"delay\",\"endDelay\",\"repeat\",\"easing$1\",\"direction\",\"offset\",\"allowWebkitAcceleration\",\"data$1\",\"getAnimationData\",\"canAnimateNatively\",\"supports\",\"waapi\",\"valueIsTransform\",\"isTransform\",\"addTransformToElement\",\"name\",\"motionValue\",\"getMotionValue\",\"values\",\"definition\",\"transformDefinitions\",\"get\",\"isEasingGenerator\",\"generator\",\"readInitialValue\",\"_a\",\"_b\",\"initialValue\",\"keyframes$1\",\"hydrateKeyframes\",\"keyframesList\",\"custom\",\"createAnimation\",\"undefined\",\"isCssVar\",\"cssRegisterProperty\",\"registerCssVariable\",\"map\",\"isNumber\",\"toDefaultUnit\",\"length\",\"partialKeyframes\",\"unshift\",\"animationOptions\",\"time\",\"ms\",\"isEasingList\",\"convertEasing\",\"iterations\",\"fill\",\"animate\",\"finished\",\"Promise\",\"resolve\",\"reject\",\"onfinish\",\"oncancel\",\"target\",\"then\",\"set\",\"cancel\",\"catch\",\"noop\",\"playbackRate\",\"parseFloat\",\"Animation\",\"latest\",\"render\",\"assign\",\"setAnimation\"]\n}\n"]