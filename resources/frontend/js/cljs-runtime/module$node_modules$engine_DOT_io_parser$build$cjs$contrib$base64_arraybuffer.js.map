{
"version":3,
"file":"module$node_modules$engine_DOT_io_parser$build$cjs$contrib$base64_arraybuffer.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/engine_DOT_io-parser/build/cjs/contrib/base64-arraybuffer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$engine_DOT_io_parser$build$cjs$contrib$base64_arraybuffer\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decode = exports.encode = void 0;\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n// Use a lookup table to find the index.\nconst lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\nfor (let i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n}\nconst encode = (arraybuffer) => {\n    let bytes = new Uint8Array(arraybuffer), i, len = bytes.length, base64 = '';\n    for (i = 0; i < len; i += 3) {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n    }\n    if (len % 3 === 2) {\n        base64 = base64.substring(0, base64.length - 1) + '=';\n    }\n    else if (len % 3 === 1) {\n        base64 = base64.substring(0, base64.length - 2) + '==';\n    }\n    return base64;\n};\nexports.encode = encode;\nconst decode = (base64) => {\n    let bufferLength = base64.length * 0.75, len = base64.length, i, p = 0, encoded1, encoded2, encoded3, encoded4;\n    if (base64[base64.length - 1] === '=') {\n        bufferLength--;\n        if (base64[base64.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n    const arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);\n    for (i = 0; i < len; i += 4) {\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n    return arraybuffer;\n};\nexports.decode = decode;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","decode","encode","lookup","Uint8Array","i","length","chars","charCodeAt","arraybuffer","bytes","len","base64","substring","bufferLength","p","encoded1","encoded2","encoded3","encoded4","ArrayBuffer"]
}
