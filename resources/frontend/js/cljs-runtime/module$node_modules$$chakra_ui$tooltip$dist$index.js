shadow$provide.module$node_modules$$chakra_ui$tooltip$dist$index=function(global,require,module,exports){function omit(object,keysToOmit=[]){object=Object.assign({},object);for(const key of keysToOmit)key in object&&delete object[key];return object}function useTooltip(props={}){const {openDelay=0,closeDelay=0,closeOnClick=!0,closeOnMouseDown,closeOnScroll,closeOnPointerDown=closeOnMouseDown,closeOnEsc=!0,onOpen:onOpenProp,onClose:onCloseProp,placement,id,isOpen:isOpenProp,defaultIsOpen,arrowSize=
10,arrowShadowColor,arrowPadding,modifiers,isDisabled,gutter,offset,direction,...htmlProps}=props,{isOpen,onOpen,onClose}=(0,import_react_use_disclosure.useDisclosure)({isOpen:isOpenProp,defaultIsOpen,onOpen:onOpenProp,onClose:onCloseProp}),{referenceRef,getPopperProps,getArrowInnerProps,getArrowProps}=(0,import_popper.usePopper)({enabled:isOpen,placement,arrowPadding,modifiers,gutter,offset,direction});props=(0,import_react.useId)();const tooltipId=`tooltip-${null!=id?id:props}`,ref=(0,import_react.useRef)(null),
enterTimeout=(0,import_react.useRef)(),clearEnterTimeout=(0,import_react.useCallback)(()=>{enterTimeout.current&&(clearTimeout(enterTimeout.current),enterTimeout.current=void 0)},[]),exitTimeout=(0,import_react.useRef)(),clearExitTimeout=(0,import_react.useCallback)(()=>{exitTimeout.current&&(clearTimeout(exitTimeout.current),exitTimeout.current=void 0)},[]),closeNow=(0,import_react.useCallback)(()=>{clearExitTimeout();onClose()},[onClose,clearExitTimeout]),dispatchCloseEvent=useCloseEvent(ref,closeNow),
openWithDelay=(0,import_react.useCallback)(()=>{if(!isDisabled&&!enterTimeout.current){dispatchCloseEvent();const win=getWin(ref);enterTimeout.current=win.setTimeout(onOpen,openDelay)}},[dispatchCloseEvent,isDisabled,onOpen,openDelay]),closeWithDelay=(0,import_react.useCallback)(()=>{clearEnterTimeout();const win=getWin(ref);exitTimeout.current=win.setTimeout(closeNow,closeDelay)},[closeDelay,closeNow,clearEnterTimeout]),onClick=(0,import_react.useCallback)(()=>{isOpen&&closeOnClick&&closeWithDelay()},
[closeOnClick,closeWithDelay,isOpen]),onPointerDown=(0,import_react.useCallback)(()=>{isOpen&&closeOnPointerDown&&closeWithDelay()},[closeOnPointerDown,closeWithDelay,isOpen]);props=(0,import_react.useCallback)(event=>{isOpen&&"Escape"===event.key&&closeWithDelay()},[isOpen,closeWithDelay]);(0,import_react_use_event_listener.useEventListener)(()=>getDoc(ref),"keydown",closeOnEsc?props:void 0);(0,import_react_use_event_listener.useEventListener)(()=>getDoc(ref),"scroll",()=>{isOpen&&closeOnScroll&&
closeNow()});(0,import_react.useEffect)(()=>{isDisabled&&(clearEnterTimeout(),isOpen&&onClose())},[isDisabled,isOpen,onClose,clearEnterTimeout]);(0,import_react.useEffect)(()=>()=>{clearEnterTimeout();clearExitTimeout()},[clearEnterTimeout,clearExitTimeout]);(0,import_react_use_event_listener.useEventListener)(()=>ref.current,"pointerleave",closeWithDelay);props=(0,import_react.useCallback)((props2={},_ref=null)=>({...props2,ref:(0,import_react_use_merge_refs.mergeRefs)(ref,_ref,referenceRef),onPointerEnter:(0,import_shared_utils.callAllHandlers)(props2.onPointerEnter,
e=>{"touch"!==e.pointerType&&openWithDelay()}),onClick:(0,import_shared_utils.callAllHandlers)(props2.onClick,onClick),onPointerDown:(0,import_shared_utils.callAllHandlers)(props2.onPointerDown,onPointerDown),onFocus:(0,import_shared_utils.callAllHandlers)(props2.onFocus,openWithDelay),onBlur:(0,import_shared_utils.callAllHandlers)(props2.onBlur,closeWithDelay),"aria-describedby":isOpen?tooltipId:void 0}),[openWithDelay,closeWithDelay,onPointerDown,isOpen,tooltipId,onClick,referenceRef]);const getTooltipPositionerProps=
(0,import_react.useCallback)((props2={},forwardedRef=null)=>getPopperProps({...props2,style:{...props2.style,[import_popper.popperCSSVars.arrowSize.var]:arrowSize?`${arrowSize}px`:void 0,[import_popper.popperCSSVars.arrowShadowColor.var]:arrowShadowColor}},forwardedRef),[getPopperProps,arrowSize,arrowShadowColor]),getTooltipProps=(0,import_react.useCallback)((props2={},ref2=null)=>({ref:ref2,...htmlProps,...props2,id:tooltipId,role:"tooltip",style:{...props2.style,position:"relative",transformOrigin:import_popper.popperCSSVars.transformOrigin.varRef}}),
[htmlProps,tooltipId]);return{isOpen,show:openWithDelay,hide:closeWithDelay,getTriggerProps:props,getTooltipProps,getTooltipPositionerProps,getArrowProps,getArrowInnerProps}}function useCloseEvent(ref,close){(0,import_react.useEffect)(()=>{const doc=getDoc(ref);doc.addEventListener(closeEventName,close);return()=>doc.removeEventListener(closeEventName,close)},[close,ref]);return()=>{const doc=getDoc(ref),win=getWin(ref);doc.dispatchEvent(new win.CustomEvent(closeEventName))}}var __defProp=Object.defineProperty,
__getOwnPropDesc=Object.getOwnPropertyDescriptor,__getOwnPropNames=Object.getOwnPropertyNames,__hasOwnProp=Object.prototype.hasOwnProperty,__copyProps=(to,from,except,desc)=>{if(from&&"object"===typeof from||"function"===typeof from)for(let key of __getOwnPropNames(from))__hasOwnProp.call(to,key)||key===except||__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});return to};global={};((target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],
enumerable:!0})})(global,{Tooltip:()=>Tooltip,useTooltip:()=>useTooltip});module.exports=(mod=>__copyProps(__defProp({},"__esModule",{value:!0}),mod))(global);var import_popper2=require("module$node_modules$$chakra_ui$popper$dist$index"),import_portal=require("module$node_modules$$chakra_ui$portal$dist$index"),import_system=require("module$node_modules$$chakra_ui$system$dist$index"),import_framer_motion=require("module$node_modules$framer_motion$dist$cjs$index"),import_react2=require("module$node_modules$react$index"),
scale={exit:{scale:.85,opacity:0,transition:{opacity:{duration:.15,easings:"easeInOut"},scale:{duration:.2,easings:"easeInOut"}}},enter:{scale:1,opacity:1,transition:{opacity:{easings:"easeOut",duration:.2},scale:{duration:.2,ease:[.175,.885,.4,1.1]}}}},import_react_use_event_listener=require("module$node_modules$$chakra_ui$react_use_event_listener$dist$index"),import_react_use_disclosure=require("module$node_modules$$chakra_ui$react_use_disclosure$dist$index"),import_popper=require("module$node_modules$$chakra_ui$popper$dist$index"),
import_react_use_merge_refs=require("module$node_modules$$chakra_ui$react_use_merge_refs$dist$index"),import_shared_utils=require("module$node_modules$$chakra_ui$shared_utils$dist$index"),import_react=require("module$node_modules$react$index"),getDoc=ref=>{var _a;return(null==(_a=ref.current)?void 0:_a.ownerDocument)||document},getWin=ref=>{var _a,_b;return(null==(_b=null==(_a=ref.current)?void 0:_a.ownerDocument)?void 0:_b.defaultView)||window},closeEventName="chakra-ui:close-tooltip",import_jsx_runtime=
require("module$node_modules$react$jsx_runtime"),MotionDiv=(0,import_system.chakra)(import_framer_motion.motion.div),Tooltip=(0,import_system.forwardRef)((props,ref)=>{var _a,_b;const styles=(0,import_system.useStyleConfig)("Tooltip",props);var ownProps=(0,import_system.omitThemingProps)(props);props=(0,import_system.useTheme)();const {children,label,shouldWrapChildren,"aria-label":ariaLabel,hasArrow,bg,portalProps,background,backgroundColor,bgColor,motionProps,...rest}=ownProps;if(ownProps=null!=
(_b=null!=(_a=null!=background?background:backgroundColor)?_a:bg)?_b:bgColor)styles.bg=ownProps,_a=(0,import_system.getCSSVar)(props,"colors",ownProps),styles[import_popper2.popperCSSVars.arrowBg.var]=_a;_a=useTooltip({...rest,direction:props.direction});"string"===typeof children||shouldWrapChildren?_b=(0,import_jsx_runtime.jsx)(import_system.chakra.span,{display:"inline-block",tabIndex:0,..._a.getTriggerProps(),children}):(_b=import_react2.Children.only(children),_b=(0,import_react2.cloneElement)(_b,
_a.getTriggerProps(_b.props,_b.ref)));props=!!ariaLabel;ref=_a.getTooltipProps({},ref);ownProps=props?omit(ref,["role","id"]):ref;var keysToPick=["role","id"];const result={};for(const key of keysToPick)key in ref&&(result[key]=ref[key]);return label?(0,import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment,{children:[_b,(0,import_jsx_runtime.jsx)(import_framer_motion.AnimatePresence,{children:_a.isOpen&&(0,import_jsx_runtime.jsx)(import_portal.Portal,{...portalProps,children:(0,import_jsx_runtime.jsx)(import_system.chakra.div,
{..._a.getTooltipPositionerProps(),__css:{zIndex:styles.zIndex,pointerEvents:"none"},children:(0,import_jsx_runtime.jsxs)(MotionDiv,{variants:scale,initial:"exit",animate:"enter",exit:"exit",...motionProps,...ownProps,__css:styles,children:[label,props&&(0,import_jsx_runtime.jsx)(import_system.chakra.span,{srOnly:!0,...result,children:ariaLabel}),hasArrow&&(0,import_jsx_runtime.jsx)(import_system.chakra.div,{"data-popper-arrow":!0,className:"chakra-tooltip__arrow-wrapper",children:(0,import_jsx_runtime.jsx)(import_system.chakra.div,
{"data-popper-arrow-inner":!0,className:"chakra-tooltip__arrow",__css:{bg:styles.bg}})})]})})})})]}):(0,import_jsx_runtime.jsx)(import_jsx_runtime.Fragment,{children})});Tooltip.displayName="Tooltip"}
//# sourceMappingURL=module$node_modules$$chakra_ui$tooltip$dist$index.js.map
