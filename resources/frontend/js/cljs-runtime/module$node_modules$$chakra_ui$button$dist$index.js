shadow$provide.module$node_modules$$chakra_ui$button$dist$index=function(global,require,module,exports){function ButtonIcon(props){const {children,className,...rest}=props;props=(0,import_react.isValidElement)(children)?(0,import_react.cloneElement)(children,{"aria-hidden":!0,focusable:!1}):children;const _className=(0,import_shared_utils.cx)("chakra-button__icon",className);return(0,import_jsx_runtime.jsx)(import_system.chakra.span,{display:"inline-flex",alignSelf:"center",flexShrink:0,...rest,className:_className,
children:props})}function ButtonSpinner(props){const {label,placement,spacing="0.5rem",children=(0,import_jsx_runtime2.jsx)(import_spinner.Spinner,{color:"currentColor",width:"1em",height:"1em"}),className,__css,...rest}=props;props=(0,import_shared_utils2.cx)("chakra-button__spinner",className);const marginProp="start"===placement?"marginEnd":"marginStart",spinnerStyles=(0,import_react2.useMemo)(()=>({display:"flex",alignItems:"center",position:label?"relative":"absolute",[marginProp]:label?spacing:
0,fontSize:"1em",lineHeight:"normal",...__css}),[__css,label,marginProp,spacing]);return(0,import_jsx_runtime2.jsx)(import_system2.chakra.div,{className:props,...rest,__css:spinnerStyles,children})}function useButtonType(value){const [isButton,setIsButton]=(0,import_react3.useState)(!value);return{ref:(0,import_react3.useCallback)(node=>{node&&setIsButton("BUTTON"===node.tagName)},[]),type:isButton?"button":void 0}}function ButtonContent(props){const {leftIcon,rightIcon,children,iconSpacing}=props;
return(0,import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment,{children:[leftIcon&&(0,import_jsx_runtime3.jsx)(ButtonIcon,{marginEnd:iconSpacing,children:leftIcon}),children,rightIcon&&(0,import_jsx_runtime3.jsx)(ButtonIcon,{marginStart:iconSpacing,children:rightIcon})]})}var __defProp=Object.defineProperty,__getOwnPropDesc=Object.getOwnPropertyDescriptor,__getOwnPropNames=Object.getOwnPropertyNames,__hasOwnProp=Object.prototype.hasOwnProperty,__copyProps=(to,from,except,desc)=>{if(from&&"object"===
typeof from||"function"===typeof from)for(let key of __getOwnPropNames(from))__hasOwnProp.call(to,key)||key===except||__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});return to};global={};((target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],enumerable:!0})})(global,{Button:()=>Button,ButtonGroup:()=>ButtonGroup,ButtonSpinner:()=>ButtonSpinner,IconButton:()=>IconButton,useButtonGroup:()=>useButtonGroup});module.exports=(mod=>__copyProps(__defProp({},
"__esModule",{value:!0}),mod))(global);var import_react_use_merge_refs=require("module$node_modules$$chakra_ui$react_use_merge_refs$dist$index"),import_system3=require("module$node_modules$$chakra_ui$system$dist$index"),import_shared_utils3=require("module$node_modules$$chakra_ui$shared_utils$dist$index"),import_react4=require("module$node_modules$react$index");module=require("module$node_modules$$chakra_ui$react_context$dist$index");var [ButtonGroupProvider,useButtonGroup]=(0,module.createContext)({strict:!1,
name:"ButtonGroupContext"}),import_system=require("module$node_modules$$chakra_ui$system$dist$index"),import_shared_utils=require("module$node_modules$$chakra_ui$shared_utils$dist$index"),import_react=require("module$node_modules$react$index"),import_jsx_runtime=require("module$node_modules$react$jsx_runtime");ButtonIcon.displayName="ButtonIcon";var import_spinner=require("module$node_modules$$chakra_ui$spinner$dist$index"),import_system2=require("module$node_modules$$chakra_ui$system$dist$index"),
import_shared_utils2=require("module$node_modules$$chakra_ui$shared_utils$dist$index"),import_react2=require("module$node_modules$react$index"),import_jsx_runtime2=require("module$node_modules$react$jsx_runtime");ButtonSpinner.displayName="ButtonSpinner";var import_react3=require("module$node_modules$react$index"),import_jsx_runtime3=require("module$node_modules$react$jsx_runtime"),Button=(0,import_system3.forwardRef)((props,ref)=>{const group=useButtonGroup(),styles=(0,import_system3.useStyleConfig)("Button",
{...group,...props}),{isDisabled=null==group?void 0:group.isDisabled,isLoading,isActive,children,leftIcon,rightIcon,loadingText,iconSpacing="0.5rem",type,spinner,spinnerPlacement="start",className,as,...rest}=(0,import_system3.omitThemingProps)(props);props=(0,import_react4.useMemo)(()=>{const _focus={...(null==styles?void 0:styles._focus),zIndex:1};return{display:"inline-flex",appearance:"none",alignItems:"center",justifyContent:"center",userSelect:"none",position:"relative",whiteSpace:"nowrap",
verticalAlign:"middle",outline:"none",...styles,...(!!group&&{_focus})}},[styles,group]);const {ref:_ref,type:defaultType}=useButtonType(as),contentProps={rightIcon,leftIcon,iconSpacing,children};return(0,import_jsx_runtime3.jsxs)(import_system3.chakra.button,{disabled:isDisabled||isLoading,ref:(0,import_react_use_merge_refs.useMergeRefs)(ref,_ref),as,type:null!=type?type:defaultType,"data-active":(0,import_shared_utils3.dataAttr)(isActive),"data-loading":(0,import_shared_utils3.dataAttr)(isLoading),
__css:props,className:(0,import_shared_utils3.cx)("chakra-button",className),...rest,children:[isLoading&&"start"===spinnerPlacement&&(0,import_jsx_runtime3.jsx)(ButtonSpinner,{className:"chakra-button__spinner--start",label:loadingText,placement:"start",spacing:iconSpacing,children:spinner}),isLoading?loadingText||(0,import_jsx_runtime3.jsx)(import_system3.chakra.span,{opacity:0,children:(0,import_jsx_runtime3.jsx)(ButtonContent,{...contentProps})}):(0,import_jsx_runtime3.jsx)(ButtonContent,{...contentProps}),
isLoading&&"end"===spinnerPlacement&&(0,import_jsx_runtime3.jsx)(ButtonSpinner,{className:"chakra-button__spinner--end",label:loadingText,placement:"end",spacing:iconSpacing,children:spinner})]})});Button.displayName="Button";var import_system4=require("module$node_modules$$chakra_ui$system$dist$index"),import_shared_utils4=require("module$node_modules$$chakra_ui$shared_utils$dist$index"),import_react5=require("module$node_modules$react$index"),import_jsx_runtime4=require("module$node_modules$react$jsx_runtime"),
attachedStyles={horizontal:{"\x3e *:first-of-type:not(:last-of-type)":{borderEndRadius:0},"\x3e *:not(:first-of-type):not(:last-of-type)":{borderRadius:0},"\x3e *:not(:first-of-type):last-of-type":{borderStartRadius:0}},vertical:{"\x3e *:first-of-type:not(:last-of-type)":{borderBottomRadius:0},"\x3e *:not(:first-of-type):not(:last-of-type)":{borderRadius:0},"\x3e *:not(:first-of-type):last-of-type":{borderTopRadius:0}}},gapStyles={horizontal:spacing=>({"\x26 \x3e *:not(style) ~ *:not(style)":{marginStart:spacing}}),
vertical:spacing=>({"\x26 \x3e *:not(style) ~ *:not(style)":{marginTop:spacing}})},ButtonGroup=(0,import_system4.forwardRef)(function(props,ref){const {size,colorScheme,variant,className,spacing="0.5rem",isAttached,isDisabled,orientation="horizontal",...rest}=props;props=(0,import_shared_utils4.cx)("chakra-button__group",className);const context=(0,import_react5.useMemo)(()=>({size,colorScheme,variant,isDisabled}),[size,colorScheme,variant,isDisabled]);let groupStyles={display:"inline-flex",...(isAttached?
attachedStyles[orientation]:gapStyles[orientation](spacing))};return(0,import_jsx_runtime4.jsx)(ButtonGroupProvider,{value:context,children:(0,import_jsx_runtime4.jsx)(import_system4.chakra.div,{ref,role:"group",__css:groupStyles,className:props,"data-attached":isAttached?"":void 0,"data-orientation":orientation,flexDir:"vertical"===orientation?"column":void 0,...rest})})});ButtonGroup.displayName="ButtonGroup";module=require("module$node_modules$$chakra_ui$system$dist$index");var import_react6=require("module$node_modules$react$index"),
import_jsx_runtime5=require("module$node_modules$react$jsx_runtime"),IconButton=(0,module.forwardRef)((props,ref)=>{const {icon,children,isRound,"aria-label":ariaLabel,...rest}=props;props=icon||children;props=(0,import_react6.isValidElement)(props)?(0,import_react6.cloneElement)(props,{"aria-hidden":!0,focusable:!1}):null;return(0,import_jsx_runtime5.jsx)(Button,{padding:"0",borderRadius:isRound?"full":void 0,ref,"aria-label":ariaLabel,...rest,children:props})});IconButton.displayName="IconButton"}
//# sourceMappingURL=module$node_modules$$chakra_ui$button$dist$index.js.map
