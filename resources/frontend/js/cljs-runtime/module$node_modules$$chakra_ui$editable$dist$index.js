shadow$provide.module$node_modules$$chakra_ui$editable$dist$index=function(global,require,module,exports){function contains(parent,child){return parent?parent===child||parent.contains(child):!1}function useEditable(props={}){const {onChange:onChangeProp,onCancel:onCancelProp,onSubmit:onSubmitProp,value:valueProp,isDisabled,defaultValue,startWithEditView,isPreviewFocusable=!0,submitOnBlur=!0,selectAllOnFocus=!0,placeholder,onEdit:onEditCallback,...htmlProps}=props,onEditProp=(0,import_react_use_callback_ref.useCallbackRef)(onEditCallback),
[isEditing,setIsEditing]=(0,import_react.useState)(!(!startWithEditView||isDisabled)),[value,setValue]=(0,import_react_use_controllable_state.useControllableState)({defaultValue:defaultValue||"",value:valueProp,onChange:onChangeProp}),[prevValue,setPrevValue]=(0,import_react.useState)(value),inputRef=(0,import_react.useRef)(null),previewRef=(0,import_react.useRef)(null),editButtonRef=(0,import_react.useRef)(null),cancelButtonRef=(0,import_react.useRef)(null),submitButtonRef=(0,import_react.useRef)(null);
(0,import_react_use_focus_on_pointer_down.useFocusOnPointerDown)({ref:inputRef,enabled:isEditing,elements:[cancelButtonRef,submitButtonRef]});const isInteractive=!isEditing&&!isDisabled;(0,import_react_use_safe_layout_effect.useSafeLayoutEffect)(()=>{var _a,_b;isEditing&&(null==(_a=inputRef.current)?void 0:_a.focus(),selectAllOnFocus&&(null==(_b=inputRef.current)?void 0:_b.select()))},[]);(0,import_react_use_update_effect.useUpdateEffect)(()=>{var _a,_b,_c;isEditing?(null==(_b=inputRef.current)?void 0:
_b.focus(),selectAllOnFocus&&(null==(_c=inputRef.current)?void 0:_c.select()),null==onEditProp?void 0:onEditProp()):null==(_a=editButtonRef.current)?void 0:_a.focus()},[isEditing,onEditProp,selectAllOnFocus]);const onEdit=(0,import_react.useCallback)(()=>{isInteractive&&setIsEditing(!0)},[isInteractive]),onUpdatePrevValue=(0,import_react.useCallback)(()=>{setPrevValue(value)},[value]),onCancel=(0,import_react.useCallback)(()=>{setIsEditing(!1);setValue(prevValue);null==onCancelProp?void 0:onCancelProp(prevValue)},
[onCancelProp,setValue,prevValue]),onSubmit=(0,import_react.useCallback)(()=>{setIsEditing(!1);setPrevValue(value);null==onSubmitProp?void 0:onSubmitProp(value)},[value,onSubmitProp]);(0,import_react.useEffect)(()=>{if(!isEditing){var inputEl=inputRef.current;(null==inputEl?void 0:inputEl.ownerDocument.activeElement)===inputEl&&(null==inputEl?void 0:inputEl.blur())}},[isEditing]);const onChange=(0,import_react.useCallback)(event=>{setValue(event.currentTarget.value)},[setValue]),onKeyDown=(0,import_react.useCallback)(event=>
{const action={Escape:onCancel,Enter:event2=>{event2.shiftKey||event2.metaKey||onSubmit()}}[event.key];action&&(event.preventDefault(),action(event))},[onCancel,onSubmit]),onKeyDownWithoutSubmit=(0,import_react.useCallback)(event=>{const action={Escape:onCancel}[event.key];action&&(event.preventDefault(),action(event))},[onCancel]),isValueEmpty=0===value.length,onBlur=(0,import_react.useCallback)(event=>{var _a;if(isEditing){var doc=event.currentTarget.ownerDocument;event=null!=(_a=event.relatedTarget)?
_a:doc.activeElement;_a=contains(cancelButtonRef.current,event);doc=contains(submitButtonRef.current,event);_a||doc||(submitOnBlur?onSubmit():onCancel())}},[submitOnBlur,onSubmit,onCancel,isEditing]);props=(0,import_react.useCallback)((props2={},ref=null)=>{const tabIndex=isInteractive&&isPreviewFocusable?0:void 0;return{...props2,ref:(0,import_react_use_merge_refs.mergeRefs)(ref,previewRef),children:isValueEmpty?placeholder:value,hidden:isEditing,"aria-disabled":(0,import_shared_utils.ariaAttr)(isDisabled),
tabIndex,onFocus:(0,import_shared_utils.callAllHandlers)(props2.onFocus,onEdit,onUpdatePrevValue)}},[isDisabled,isEditing,isInteractive,isPreviewFocusable,isValueEmpty,onEdit,onUpdatePrevValue,placeholder,value]);const getInputProps=(0,import_react.useCallback)((props2={},ref=null)=>({...props2,hidden:!isEditing,placeholder,ref:(0,import_react_use_merge_refs.mergeRefs)(ref,inputRef),disabled:isDisabled,"aria-disabled":(0,import_shared_utils.ariaAttr)(isDisabled),value,onBlur:(0,import_shared_utils.callAllHandlers)(props2.onBlur,
onBlur),onChange:(0,import_shared_utils.callAllHandlers)(props2.onChange,onChange),onKeyDown:(0,import_shared_utils.callAllHandlers)(props2.onKeyDown,onKeyDown),onFocus:(0,import_shared_utils.callAllHandlers)(props2.onFocus,onUpdatePrevValue)}),[isDisabled,isEditing,onBlur,onChange,onKeyDown,onUpdatePrevValue,placeholder,value]),getTextareaProps=(0,import_react.useCallback)((props2={},ref=null)=>({...props2,hidden:!isEditing,placeholder,ref:(0,import_react_use_merge_refs.mergeRefs)(ref,inputRef),
disabled:isDisabled,"aria-disabled":(0,import_shared_utils.ariaAttr)(isDisabled),value,onBlur:(0,import_shared_utils.callAllHandlers)(props2.onBlur,onBlur),onChange:(0,import_shared_utils.callAllHandlers)(props2.onChange,onChange),onKeyDown:(0,import_shared_utils.callAllHandlers)(props2.onKeyDown,onKeyDownWithoutSubmit),onFocus:(0,import_shared_utils.callAllHandlers)(props2.onFocus,onUpdatePrevValue)}),[isDisabled,isEditing,onBlur,onChange,onKeyDownWithoutSubmit,onUpdatePrevValue,placeholder,value]),
getEditButtonProps=(0,import_react.useCallback)((props2={},ref=null)=>({"aria-label":"Edit",...props2,type:"button",onClick:(0,import_shared_utils.callAllHandlers)(props2.onClick,onEdit),ref:(0,import_react_use_merge_refs.mergeRefs)(ref,editButtonRef),disabled:isDisabled}),[onEdit,isDisabled]),getSubmitButtonProps=(0,import_react.useCallback)((props2={},ref=null)=>({...props2,"aria-label":"Submit",ref:(0,import_react_use_merge_refs.mergeRefs)(submitButtonRef,ref),type:"button",onClick:(0,import_shared_utils.callAllHandlers)(props2.onClick,
onSubmit),disabled:isDisabled}),[onSubmit,isDisabled]),getCancelButtonProps=(0,import_react.useCallback)((props2={},ref=null)=>({"aria-label":"Cancel",id:"cancel",...props2,ref:(0,import_react_use_merge_refs.mergeRefs)(cancelButtonRef,ref),type:"button",onClick:(0,import_shared_utils.callAllHandlers)(props2.onClick,onCancel),disabled:isDisabled}),[onCancel,isDisabled]);return{isEditing,isDisabled,isValueEmpty,value,onEdit,onCancel,onSubmit,getPreviewProps:props,getInputProps,getTextareaProps,getEditButtonProps,
getSubmitButtonProps,getCancelButtonProps,htmlProps}}function useEditableControls(){const {isEditing,getEditButtonProps,getCancelButtonProps,getSubmitButtonProps}=useEditableContext();return{isEditing,getEditButtonProps,getCancelButtonProps,getSubmitButtonProps}}function useEditableState(){const {isEditing,onSubmit,onCancel,onEdit,isDisabled}=useEditableContext();return{isEditing,onSubmit,onCancel,onEdit,isDisabled}}var __defProp=Object.defineProperty,__getOwnPropDesc=Object.getOwnPropertyDescriptor,
__getOwnPropNames=Object.getOwnPropertyNames,__hasOwnProp=Object.prototype.hasOwnProperty,__copyProps=(to,from,except,desc)=>{if(from&&"object"===typeof from||"function"===typeof from)for(let key of __getOwnPropNames(from))__hasOwnProp.call(to,key)||key===except||__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});return to};global={};((target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],enumerable:!0})})(global,{Editable:()=>Editable,
EditableInput:()=>EditableInput,EditablePreview:()=>EditablePreview,EditableTextarea:()=>EditableTextarea,useEditable:()=>useEditable,useEditableControls:()=>useEditableControls,useEditableState:()=>useEditableState,useEditableStyles:()=>useEditableStyles});module.exports=(mod=>__copyProps(__defProp({},"__esModule",{value:!0}),mod))(global);var import_shared_utils2=require("module$node_modules$$chakra_ui$shared_utils$dist$index"),import_system=require("module$node_modules$$chakra_ui$system$dist$index");
module=require("module$node_modules$$chakra_ui$react_context$dist$index");var [EditableStylesProvider,useEditableStyles]=(0,module.createContext)({name:"EditableStylesContext",errorMessage:"useEditableStyles returned is 'undefined'. Seems you forgot to wrap the components in \"\x3cEditable /\x3e\" "}),[EditableProvider,useEditableContext]=(0,module.createContext)({name:"EditableContext",errorMessage:"useEditableContext: context is undefined. Seems you forgot to wrap the editable components in `\x3cEditable /\x3e`"}),
import_react_use_focus_on_pointer_down=require("module$node_modules$$chakra_ui$react_use_focus_on_pointer_down$dist$index"),import_react_use_safe_layout_effect=require("module$node_modules$$chakra_ui$react_use_safe_layout_effect$dist$index"),import_react_use_update_effect=require("module$node_modules$$chakra_ui$react_use_update_effect$dist$index"),import_react_use_controllable_state=require("module$node_modules$$chakra_ui$react_use_controllable_state$dist$index"),import_react_use_merge_refs=require("module$node_modules$$chakra_ui$react_use_merge_refs$dist$index"),
import_react_use_callback_ref=require("module$node_modules$$chakra_ui$react_use_callback_ref$dist$index"),import_shared_utils=require("module$node_modules$$chakra_ui$shared_utils$dist$index"),import_react=require("module$node_modules$react$index"),import_jsx_runtime=require("module$node_modules$react$jsx_runtime"),Editable=(0,import_system.forwardRef)(function(props,ref){const styles=(0,import_system.useMultiStyleConfig)("Editable",props);var ownProps=(0,import_system.omitThemingProps)(props);const {htmlProps,
...context}=useEditable(ownProps),{isEditing,onSubmit,onCancel,onEdit}=context;ownProps=(0,import_shared_utils2.cx)("chakra-editable",props.className);props=(0,import_shared_utils2.runIfFn)(props.children,{isEditing,onSubmit,onCancel,onEdit});return(0,import_jsx_runtime.jsx)(EditableProvider,{value:context,children:(0,import_jsx_runtime.jsx)(EditableStylesProvider,{value:styles,children:(0,import_jsx_runtime.jsx)(import_system.chakra.div,{ref,...htmlProps,className:ownProps,children:props})})})});
Editable.displayName="Editable";var import_system2=require("module$node_modules$$chakra_ui$system$dist$index"),import_shared_utils3=require("module$node_modules$$chakra_ui$shared_utils$dist$index"),commonStyles={fontSize:"inherit",fontWeight:"inherit",textAlign:"inherit",bg:"transparent"},import_jsx_runtime2=require("module$node_modules$react$jsx_runtime"),EditableInput=(0,import_system2.forwardRef)(function(props,ref){const {getInputProps}=useEditableContext(),styles=useEditableStyles();ref=getInputProps(props,
ref);props=(0,import_shared_utils3.cx)("chakra-editable__input",props.className);return(0,import_jsx_runtime2.jsx)(import_system2.chakra.input,{...ref,__css:{outline:0,...commonStyles,...styles.input},className:props})});EditableInput.displayName="EditableInput";var import_system3=require("module$node_modules$$chakra_ui$system$dist$index"),import_shared_utils4=require("module$node_modules$$chakra_ui$shared_utils$dist$index"),import_jsx_runtime3=require("module$node_modules$react$jsx_runtime"),EditableTextarea=
(0,import_system3.forwardRef)(function(props,ref){const {getTextareaProps}=useEditableContext(),styles=useEditableStyles();ref=getTextareaProps(props,ref);props=(0,import_shared_utils4.cx)("chakra-editable__textarea",props.className);return(0,import_jsx_runtime3.jsx)(import_system3.chakra.textarea,{...ref,__css:{outline:0,...commonStyles,...styles.textarea},className:props})});EditableTextarea.displayName="EditableTextarea";var import_system4=require("module$node_modules$$chakra_ui$system$dist$index"),
import_shared_utils5=require("module$node_modules$$chakra_ui$shared_utils$dist$index"),import_jsx_runtime4=require("module$node_modules$react$jsx_runtime"),EditablePreview=(0,import_system4.forwardRef)(function(props,ref){const {getPreviewProps}=useEditableContext(),styles=useEditableStyles();ref=getPreviewProps(props,ref);props=(0,import_shared_utils5.cx)("chakra-editable__preview",props.className);return(0,import_jsx_runtime4.jsx)(import_system4.chakra.span,{...ref,__css:{cursor:"text",display:"inline-block",
...commonStyles,...styles.preview},className:props})});EditablePreview.displayName="EditablePreview"}
//# sourceMappingURL=module$node_modules$$chakra_ui$editable$dist$index.js.map
