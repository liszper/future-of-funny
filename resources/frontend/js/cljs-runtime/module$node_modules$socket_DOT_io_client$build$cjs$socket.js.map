{
"version":3,
"file":"module$node_modules$socket_DOT_io_client$build$cjs$socket.js",
"lineCount":14,
"mappings":"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",
"sources":["node_modules/socket_DOT_io-client/build/cjs/socket.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$socket_DOT_io_client$build$cjs$socket\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Socket = void 0;\nconst socket_io_parser_1 = require(\"socket.io-parser\");\nconst on_js_1 = require(\"./on.js\");\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\nconst debug = debug_1.default(\"socket.io-client:socket\"); // debug()\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\n/**\n * A Socket is the fundamental class for interacting with the server.\n *\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\nclass Socket extends component_emitter_1.Emitter {\n    /**\n     * `Socket` constructor.\n     */\n    constructor(io, nsp, opts) {\n        super();\n        /**\n         * Whether the socket is currently connected to the server.\n         *\n         * @example\n         * const socket = io();\n         *\n         * socket.on(\"connect\", () => {\n         *   console.log(socket.connected); // true\n         * });\n         *\n         * socket.on(\"disconnect\", () => {\n         *   console.log(socket.connected); // false\n         * });\n         */\n        this.connected = false;\n        /**\n         * Buffer for packets received before the CONNECT packet\n         */\n        this.receiveBuffer = [];\n        /**\n         * Buffer for packets that will be sent once the socket is connected\n         */\n        this.sendBuffer = [];\n        this.ids = 0;\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.disconnected); // false\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.disconnected); // true\n     * });\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on_js_1.on(io, \"open\", this.onopen.bind(this)),\n            on_js_1.on(io, \"packet\", this.onpacket.bind(this)),\n            on_js_1.on(io, \"error\", this.onerror.bind(this)),\n            on_js_1.on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        const packet = {\n            type: socket_io_parser_1.PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            debug(\"emitting packet with ack id %d\", id);\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n            debug(\"discard packet as the transport is not currently writable\");\n        }\n        else if (this.connected) {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        const timeout = this.flags.timeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    debug(\"removing packet with ack id %d from the buffer\", id);\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            debug(\"event with ack id %d has timed out after %d ms\", id, timeout);\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        this.acks[id] = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, [null, ...args]);\n        };\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        debug(\"transport is open - connecting\");\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data });\n            });\n        }\n        else {\n            this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data: this.auth });\n        }\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n        debug(\"close (%s)\", reason);\n        this.connected = false;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason, description);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case socket_io_parser_1.PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    const id = packet.data.sid;\n                    this.onconnect(id);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case socket_io_parser_1.PacketType.EVENT:\n            case socket_io_parser_1.PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case socket_io_parser_1.PacketType.ACK:\n            case socket_io_parser_1.PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case socket_io_parser_1.PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case socket_io_parser_1.PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        debug(\"emitting event %j\", args);\n        if (null != packet.id) {\n            debug(\"attaching ack callback to event\");\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            debug(\"sending ack %j\", args);\n            self.packet({\n                type: socket_io_parser_1.PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (\"function\" === typeof ack) {\n            debug(\"calling ack %s with %j\", packet.id, packet.data);\n            ack.apply(this, packet.data);\n            delete this.acks[packet.id];\n        }\n        else {\n            debug(\"bad ack %s\", packet.id);\n        }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id) {\n        debug(\"socket connected with id %s\", id);\n        this.id = id;\n        this.connected = true;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        });\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        debug(\"server disconnect (%s)\", this.nsp);\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n    disconnect() {\n        if (this.connected) {\n            debug(\"performing disconnect (%s)\", this.nsp);\n            this.packet({ type: socket_io_parser_1.PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n}\nexports.Socket = Socket;\n\n};"],
"names":["shadow$provide","global","require","module","exports","__importDefault","mod","__esModule","Object","defineProperty","value","Socket","socket_io_parser_1","on_js_1","component_emitter_1","debug","debug_1","default","RESERVED_EVENTS","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","Emitter","constructor","io","nsp","opts","connected","receiveBuffer","sendBuffer","ids","acks","flags","auth","_autoConnect","open","subEvents","subs","on","onopen","bind","onpacket","onerror","onclose","_readyState","send","args","unshift","emit","apply","ev","hasOwnProperty","Error","toString","packet","type","PacketType","EVENT","data","options","compress","length","id","ack","pop","_registerAckCallback","isTransportWritable","engine","transport","writable","volatile","notifyOutgoingListeners","push","timeout","undefined","timer","setTimeoutFn","i","splice","call","clearTimeoutFn","_packet","CONNECT","err","emitReserved","reason","description","sid","onconnect","BINARY_EVENT","onevent","ACK","BINARY_ACK","onack","DISCONNECT","ondisconnect","CONNECT_ERROR","destroy","message","emitEvent","_anyListeners","listeners","slice","listener","self","sent","emitBuffered","forEach","subDestroy","close","onAny","prependAny","offAny","listenersAny","onAnyOutgoing","_anyOutgoingListeners","prependAnyOutgoing","offAnyOutgoing","listenersAnyOutgoing"]
}
