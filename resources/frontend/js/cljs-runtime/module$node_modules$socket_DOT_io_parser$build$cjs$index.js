shadow$provide.module$node_modules$socket_DOT_io_parser$build$cjs$index=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.Decoder=exports.Encoder=exports.PacketType=exports.protocol=void 0;global=require("module$node_modules$$socket_DOT_io$component_emitter$index");const binary_js_1=require("module$node_modules$socket_DOT_io_parser$build$cjs$binary"),is_binary_js_1=require("module$node_modules$socket_DOT_io_parser$build$cjs$is_binary"),debug=require("module$node_modules$socket_DOT_io_parser$node_modules$debug$src$browser").default("socket.io-parser");
exports.protocol=5;var PacketType;(function(PacketType){PacketType[PacketType.CONNECT=0]="CONNECT";PacketType[PacketType.DISCONNECT=1]="DISCONNECT";PacketType[PacketType.EVENT=2]="EVENT";PacketType[PacketType.ACK=3]="ACK";PacketType[PacketType.CONNECT_ERROR=4]="CONNECT_ERROR";PacketType[PacketType.BINARY_EVENT=5]="BINARY_EVENT";PacketType[PacketType.BINARY_ACK=6]="BINARY_ACK"})(PacketType=exports.PacketType||(exports.PacketType={}));class Encoder{constructor(replacer){this.replacer=replacer}encode(obj){debug("encoding packet %j",
obj);return obj.type!==PacketType.EVENT&&obj.type!==PacketType.ACK||!is_binary_js_1.hasBinary(obj)?[this.encodeAsString(obj)]:(obj.type=obj.type===PacketType.EVENT?PacketType.BINARY_EVENT:PacketType.BINARY_ACK,this.encodeAsBinary(obj))}encodeAsString(obj){let str=""+obj.type;if(obj.type===PacketType.BINARY_EVENT||obj.type===PacketType.BINARY_ACK)str+=obj.attachments+"-";obj.nsp&&"/"!==obj.nsp&&(str+=obj.nsp+",");null!=obj.id&&(str+=obj.id);null!=obj.data&&(str+=JSON.stringify(obj.data,this.replacer));
debug("encoded %j as %s",obj,str);return str}encodeAsBinary(obj){var deconstruction=binary_js_1.deconstructPacket(obj);obj=this.encodeAsString(deconstruction.packet);deconstruction=deconstruction.buffers;deconstruction.unshift(obj);return deconstruction}}exports.Encoder=Encoder;class Decoder extends global.Emitter{constructor(reviver){super();this.reviver=reviver}add(obj){if("string"===typeof obj){if(this.reconstructor)throw Error("got plaintext data when reconstructing a packet");obj=this.decodeString(obj);
obj.type===PacketType.BINARY_EVENT||obj.type===PacketType.BINARY_ACK?(this.reconstructor=new BinaryReconstructor(obj),0===obj.attachments&&super.emitReserved("decoded",obj)):super.emitReserved("decoded",obj)}else if(is_binary_js_1.isBinary(obj)||obj.base64)if(this.reconstructor){if(obj=this.reconstructor.takeBinaryData(obj))this.reconstructor=null,super.emitReserved("decoded",obj)}else throw Error("got binary data when not reconstructing a packet");else throw Error("Unknown type: "+obj);}decodeString(str){var i=
0;const p={type:Number(str.charAt(0))};if(void 0===PacketType[p.type])throw Error("unknown packet type "+p.type);if(p.type===PacketType.BINARY_EVENT||p.type===PacketType.BINARY_ACK){for(var start=i+1;"-"!==str.charAt(++i)&&i!=str.length;);start=str.substring(start,i);if(start!=Number(start)||"-"!==str.charAt(i))throw Error("Illegal attachments");p.attachments=Number(start)}if("/"===str.charAt(i+1)){for(start=i+1;++i&&","!==str.charAt(i)&&i!==str.length;);p.nsp=str.substring(start,i)}else p.nsp="/";
start=str.charAt(i+1);if(""!==start&&Number(start)==start){for(start=i+1;++i;){const c=str.charAt(i);if(null==c||Number(c)!=c){--i;break}if(i===str.length)break}p.id=Number(str.substring(start,i+1))}if(str.charAt(++i))if(i=this.tryParse(str.substr(i)),Decoder.isPayloadValid(p.type,i))p.data=i;else throw Error("invalid payload");debug("decoded %s as %j",str,p);return p}tryParse(str){try{return JSON.parse(str,this.reviver)}catch(e){return!1}}static isPayloadValid(type,payload){switch(type){case PacketType.CONNECT:return"object"===
typeof payload;case PacketType.DISCONNECT:return void 0===payload;case PacketType.CONNECT_ERROR:return"string"===typeof payload||"object"===typeof payload;case PacketType.EVENT:case PacketType.BINARY_EVENT:return Array.isArray(payload)&&0<payload.length;case PacketType.ACK:case PacketType.BINARY_ACK:return Array.isArray(payload)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}exports.Decoder=Decoder;class BinaryReconstructor{constructor(packet){this.packet=packet;this.buffers=
[];this.reconPack=packet}takeBinaryData(binData){this.buffers.push(binData);return this.buffers.length===this.reconPack.attachments?(binData=binary_js_1.reconstructPacket(this.reconPack,this.buffers),this.finishedReconstruction(),binData):null}finishedReconstruction(){this.reconPack=null;this.buffers=[]}}}
//# sourceMappingURL=module$node_modules$socket_DOT_io_parser$build$cjs$index.js.map
