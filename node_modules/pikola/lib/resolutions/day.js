'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _resolution = require('../resolution');

var _resolution2 = _interopRequireDefault(_resolution);

var _recurrence = require('../recurrence');

var _recurrence2 = _interopRequireDefault(_recurrence);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {

  MAX: function MAX(_ref) {
    var date = _ref.date;
    var layers = _ref.layers;

    if (layers[_resolution2.default.Week].type == _recurrence2.default.Every && layers[_resolution2.default.Week].interval > 1) {
      return 7; //7 days in a week
    } else if (layers[_resolution2.default.Month].type == _recurrence2.default.Every && layers[_resolution2.default.Month].interval > 1) {
        return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate(); //get total days of specified month
      }
  },

  resolution: _resolution2.default.Day,

  datepart: function datepart(_ref2) {
    var date = _ref2.date;
    var isHigherLayerDisabled = _ref2.isHigherLayerDisabled;

    if (isHigherLayerDisabled) {
      return date.getDate();
    } else {
      var weeks = (0, _utils.getIsoWeekFromDate)(date);
      var weekStart = (0, _utils.getDateOfISOWeek)(weeks, date.getFullYear());

      return (date - weekStart) / 86400000; //total days
    }
  },

  every: function every(_ref3) {
    var date = _ref3.date;
    var interval = _ref3.interval;

    var days = date.getDate();

    var result = new Date(date);
    result.setDate(days + interval);

    return result;
  },

  on: function on(_ref4) {
    var date = _ref4.date;
    var interval = _ref4.interval;
    var isHigherLayerDisabled = _ref4.isHigherLayerDisabled;


    var result = new Date(date);

    if (isHigherLayerDisabled) {
      result.setDate(interval + 1);
    } else {
      var weeks = (0, _utils.getIsoWeekFromDate)(result);
      var weekStart = (0, _utils.getDateOfISOWeek)(weeks, result.getFullYear());

      var days = weekStart.getDate();
      weekStart.setDate(days + interval);

      result.setTime(weekStart.getTime());
    }

    return result;
  }
};