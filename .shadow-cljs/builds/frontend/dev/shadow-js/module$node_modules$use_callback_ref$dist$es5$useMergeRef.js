["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/use-callback-ref/dist/es5/useMergeRef.js"],"~:js","shadow$provide.module$node_modules$use_callback_ref$dist$es5$useMergeRef=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.useMergeRefs=void 0;var assignRef_1=require(\"module$node_modules$use_callback_ref$dist$es5$assignRef\"),useRef_1=require(\"module$node_modules$use_callback_ref$dist$es5$useRef\");exports.useMergeRefs=function(refs,defaultValue){return(0,useRef_1.useCallbackRef)(defaultValue||null,function(newValue){return refs.forEach(function(ref){return(0,assignRef_1.assignRef)(ref,\nnewValue)})})}}","~:source","shadow$provide[\"module$node_modules$use_callback_ref$dist$es5$useMergeRef\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useMergeRefs = void 0;\nvar assignRef_1 = require(\"./assignRef\");\nvar useRef_1 = require(\"./useRef\");\n/**\n * Merges two or more refs together providing a single interface to set their value\n * @param {RefObject|Ref} refs\n * @returns {MutableRefObject} - a new ref, which translates all changes to {refs}\n *\n * @see {@link mergeRefs} a version without buit-in memoization\n * @see https://github.com/theKashey/use-callback-ref#usemergerefs\n * @example\n * const Component = React.forwardRef((props, ref) => {\n *   const ownRef = useRef();\n *   const domRef = useMergeRefs([ref, ownRef]); // \uD83D\uDC48 merge together\n *   return <div ref={domRef}>...</div>\n * }\n */\nfunction useMergeRefs(refs, defaultValue) {\n    return (0, useRef_1.useCallbackRef)(defaultValue || null, function (newValue) { return refs.forEach(function (ref) { return (0, assignRef_1.assignRef)(ref, newValue); }); });\n}\nexports.useMergeRefs = useMergeRefs;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$use_callback_ref$dist$es5$assignRef","~$module$node_modules$use_callback_ref$dist$es5$useRef"]],"~:properties",["^5",["useMergeRefs","__esModule","value"]],"~:compiled-at",1681642524882,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$use_callback_ref$dist$es5$useMergeRef.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,yDAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAEtHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAQI,CAAAA,YAAR,CAAuB,IAAK,EAC5B,KAAIC,YAAcP,OAAA,CAAQ,yDAAR,CAAlB,CACIQ,SAAWR,OAAA,CAAQ,sDAAR,CAkBfE,QAAQI,CAAAA,YAAR,CAHAA,QAAqB,CAACG,IAAD,CAAOC,YAAP,CAAqB,CACtC,MAAO,GAAIF,QAASG,CAAAA,cAAb,EAA6BD,YAA7B,EAA6C,IAA7C,CAAmD,QAAS,CAACE,QAAD,CAAW,CAAE,MAAOH,KAAKI,CAAAA,OAAL,CAAa,QAAS,CAACC,GAAD,CAAM,CAAE,MAAO,GAAIP,WAAYQ,CAAAA,SAAhB,EAA2BD,GAA3B;AAAgCF,QAAhC,CAAT,CAA5B,CAAT,CAAvE,CAD+B,CApB4E;\",\n\"sources\":[\"node_modules/use-callback-ref/dist/es5/useMergeRef.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$use_callback_ref$dist$es5$useMergeRef\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.useMergeRefs = void 0;\\nvar assignRef_1 = require(\\\"./assignRef\\\");\\nvar useRef_1 = require(\\\"./useRef\\\");\\n/**\\n * Merges two or more refs together providing a single interface to set their value\\n * @param {RefObject|Ref} refs\\n * @returns {MutableRefObject} - a new ref, which translates all changes to {refs}\\n *\\n * @see {@link mergeRefs} a version without buit-in memoization\\n * @see https://github.com/theKashey/use-callback-ref#usemergerefs\\n * @example\\n * const Component = React.forwardRef((props, ref) => {\\n *   const ownRef = useRef();\\n *   const domRef = useMergeRefs([ref, ownRef]); // \\ud83d\\udc48 merge together\\n *   return <div ref={domRef}>...</div>\\n * }\\n */\\nfunction useMergeRefs(refs, defaultValue) {\\n    return (0, useRef_1.useCallbackRef)(defaultValue || null, function (newValue) { return refs.forEach(function (ref) { return (0, assignRef_1.assignRef)(ref, newValue); }); });\\n}\\nexports.useMergeRefs = useMergeRefs;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"useMergeRefs\",\"assignRef_1\",\"useRef_1\",\"refs\",\"defaultValue\",\"useCallbackRef\",\"newValue\",\"forEach\",\"ref\",\"assignRef\"]\n}\n"]