shadow$provide.module$node_modules$socket_DOT_io_parser$build$cjs$is_binary=function(global,require,module,exports){function isBinary(obj){var JSCompiler_temp;if(JSCompiler_temp=withNativeArrayBuffer)(JSCompiler_temp=obj instanceof ArrayBuffer)||(JSCompiler_temp="function"===typeof ArrayBuffer.isView?ArrayBuffer.isView(obj):obj.buffer instanceof ArrayBuffer);return JSCompiler_temp||withNativeBlob&&obj instanceof Blob||withNativeFile&&obj instanceof File}function hasBinary(obj,toJSON){if(!obj||"object"!==
typeof obj)return!1;if(Array.isArray(obj)){for(let i=0,l=obj.length;i<l;i++)if(hasBinary(obj[i]))return!0;return!1}if(isBinary(obj))return!0;if(obj.toJSON&&"function"===typeof obj.toJSON&&1===arguments.length)return hasBinary(obj.toJSON(),!0);for(const key in obj)if(Object.prototype.hasOwnProperty.call(obj,key)&&hasBinary(obj[key]))return!0;return!1}Object.defineProperty(exports,"__esModule",{value:!0});exports.hasBinary=exports.isBinary=void 0;const withNativeArrayBuffer="function"===typeof ArrayBuffer;
global=Object.prototype.toString;const withNativeBlob="function"===typeof Blob||"undefined"!==typeof Blob&&"[object BlobConstructor]"===global.call(Blob),withNativeFile="function"===typeof File||"undefined"!==typeof File&&"[object FileConstructor]"===global.call(File);exports.isBinary=isBinary;exports.hasBinary=hasBinary}
//# sourceMappingURL=module$node_modules$socket_DOT_io_parser$build$cjs$is_binary.js.map
