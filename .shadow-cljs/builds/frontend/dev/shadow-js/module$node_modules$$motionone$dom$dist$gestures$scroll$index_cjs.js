["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@motionone/dom/dist/gestures/scroll/index.cjs.js"],"~:js","shadow$provide.module$node_modules$$motionone$dom$dist$gestures$scroll$index_cjs=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});var tslib=require(\"module$node_modules$tslib$tslib\"),index=require(\"module$node_modules$$motionone$dom$dist$gestures$resize$index_cjs\"),info=require(\"module$node_modules$$motionone$dom$dist$gestures$scroll$info_cjs\"),onScrollHandler=require(\"module$node_modules$$motionone$dom$dist$gestures$scroll$on_scroll_handler_cjs\");const scrollListeners=\nnew WeakMap,resizeListeners=new WeakMap,onScrollHandlers=new WeakMap;exports.scroll=function(onScroll,_a$jscomp$0={}){var {container=document.documentElement}=_a$jscomp$0;_a$jscomp$0=tslib.__rest(_a$jscomp$0,[\"container\"]);let containerHandlers=onScrollHandlers.get(container);containerHandlers||(containerHandlers=new Set,onScrollHandlers.set(container,containerHandlers));var info$1=info.createScrollInfo();const containerHandler=onScrollHandler.createOnScrollHandler(container,onScroll,info$1,_a$jscomp$0);\ncontainerHandlers.add(containerHandler);scrollListeners.has(container)||(_a$jscomp$0=()=>{const time=performance.now();for(const handler of containerHandlers)handler.measure();for(const handler of containerHandlers)handler.update(time);for(const handler of containerHandlers)handler.notify()},scrollListeners.set(container,_a$jscomp$0),info$1=container===document.documentElement?window:container,window.addEventListener(\"resize\",_a$jscomp$0,{passive:!0}),container!==document.documentElement&&resizeListeners.set(container,\nindex.resize(container,_a$jscomp$0)),info$1.addEventListener(\"scroll\",_a$jscomp$0,{passive:!0}));_a$jscomp$0=scrollListeners.get(container);const onLoadProcesss=requestAnimationFrame(_a$jscomp$0);return()=>{var _a;\"function\"!==typeof onScroll&&onScroll.stop();cancelAnimationFrame(onLoadProcesss);var containerHandlers=onScrollHandlers.get(container);containerHandlers&&(containerHandlers.delete(containerHandler),containerHandlers.size||(containerHandlers=scrollListeners.get(container),scrollListeners.delete(container),\ncontainerHandlers&&((container===document.documentElement?window:container).removeEventListener(\"scroll\",containerHandlers),null===(_a=resizeListeners.get(container))||void 0===_a?void 0:_a(),window.removeEventListener(\"resize\",containerHandlers))))}}}","~:source","shadow$provide[\"module$node_modules$$motionone$dom$dist$gestures$scroll$index_cjs\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tslib = require('tslib');\nvar index = require('../resize/index.cjs.js');\nvar info = require('./info.cjs.js');\nvar onScrollHandler = require('./on-scroll-handler.cjs.js');\n\nconst scrollListeners = new WeakMap();\nconst resizeListeners = new WeakMap();\nconst onScrollHandlers = new WeakMap();\nconst getEventTarget = (element) => element === document.documentElement ? window : element;\nfunction scroll(onScroll, _a = {}) {\n    var { container = document.documentElement } = _a, options = tslib.__rest(_a, [\"container\"]);\n    let containerHandlers = onScrollHandlers.get(container);\n    /**\n     * Get the onScroll handlers for this container.\n     * If one isn't found, create a new one.\n     */\n    if (!containerHandlers) {\n        containerHandlers = new Set();\n        onScrollHandlers.set(container, containerHandlers);\n    }\n    /**\n     * Create a new onScroll handler for the provided callback.\n     */\n    const info$1 = info.createScrollInfo();\n    const containerHandler = onScrollHandler.createOnScrollHandler(container, onScroll, info$1, options);\n    containerHandlers.add(containerHandler);\n    /**\n     * Check if there's a scroll event listener for this container.\n     * If not, create one.\n     */\n    if (!scrollListeners.has(container)) {\n        const listener = () => {\n            const time = performance.now();\n            for (const handler of containerHandlers)\n                handler.measure();\n            for (const handler of containerHandlers)\n                handler.update(time);\n            for (const handler of containerHandlers)\n                handler.notify();\n        };\n        scrollListeners.set(container, listener);\n        const target = getEventTarget(container);\n        window.addEventListener(\"resize\", listener, { passive: true });\n        if (container !== document.documentElement) {\n            resizeListeners.set(container, index.resize(container, listener));\n        }\n        target.addEventListener(\"scroll\", listener, { passive: true });\n    }\n    const listener = scrollListeners.get(container);\n    const onLoadProcesss = requestAnimationFrame(listener);\n    return () => {\n        var _a;\n        if (typeof onScroll !== \"function\")\n            onScroll.stop();\n        cancelAnimationFrame(onLoadProcesss);\n        /**\n         * Check if we even have any handlers for this container.\n         */\n        const containerHandlers = onScrollHandlers.get(container);\n        if (!containerHandlers)\n            return;\n        containerHandlers.delete(containerHandler);\n        if (containerHandlers.size)\n            return;\n        /**\n         * If no more handlers, remove the scroll listener too.\n         */\n        const listener = scrollListeners.get(container);\n        scrollListeners.delete(container);\n        if (listener) {\n            getEventTarget(container).removeEventListener(\"scroll\", listener);\n            (_a = resizeListeners.get(container)) === null || _a === void 0 ? void 0 : _a();\n            window.removeEventListener(\"resize\", listener);\n        }\n    };\n}\n\nexports.scroll = scroll;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$tslib$tslib","~$module$node_modules$$motionone$dom$dist$gestures$scroll$on_scroll_handler_cjs","~$shadow.js","~$module$node_modules$$motionone$dom$dist$gestures$resize$index_cjs","~$module$node_modules$$motionone$dom$dist$gestures$scroll$info_cjs"]],"~:properties",["^5",["passive","scroll","__esModule","value"]],"~:compiled-at",1681642524801,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$motionone$dom$dist$gestures$scroll$index_cjs.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@motionone/dom/dist/gestures/scroll/index.cjs.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$motionone$dom$dist$gestures$scroll$index_cjs\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\nvar tslib = require('tslib');\\nvar index = require('../resize/index.cjs.js');\\nvar info = require('./info.cjs.js');\\nvar onScrollHandler = require('./on-scroll-handler.cjs.js');\\n\\nconst scrollListeners = new WeakMap();\\nconst resizeListeners = new WeakMap();\\nconst onScrollHandlers = new WeakMap();\\nconst getEventTarget = (element) => element === document.documentElement ? window : element;\\nfunction scroll(onScroll, _a = {}) {\\n    var { container = document.documentElement } = _a, options = tslib.__rest(_a, [\\\"container\\\"]);\\n    let containerHandlers = onScrollHandlers.get(container);\\n    /**\\n     * Get the onScroll handlers for this container.\\n     * If one isn't found, create a new one.\\n     */\\n    if (!containerHandlers) {\\n        containerHandlers = new Set();\\n        onScrollHandlers.set(container, containerHandlers);\\n    }\\n    /**\\n     * Create a new onScroll handler for the provided callback.\\n     */\\n    const info$1 = info.createScrollInfo();\\n    const containerHandler = onScrollHandler.createOnScrollHandler(container, onScroll, info$1, options);\\n    containerHandlers.add(containerHandler);\\n    /**\\n     * Check if there's a scroll event listener for this container.\\n     * If not, create one.\\n     */\\n    if (!scrollListeners.has(container)) {\\n        const listener = () => {\\n            const time = performance.now();\\n            for (const handler of containerHandlers)\\n                handler.measure();\\n            for (const handler of containerHandlers)\\n                handler.update(time);\\n            for (const handler of containerHandlers)\\n                handler.notify();\\n        };\\n        scrollListeners.set(container, listener);\\n        const target = getEventTarget(container);\\n        window.addEventListener(\\\"resize\\\", listener, { passive: true });\\n        if (container !== document.documentElement) {\\n            resizeListeners.set(container, index.resize(container, listener));\\n        }\\n        target.addEventListener(\\\"scroll\\\", listener, { passive: true });\\n    }\\n    const listener = scrollListeners.get(container);\\n    const onLoadProcesss = requestAnimationFrame(listener);\\n    return () => {\\n        var _a;\\n        if (typeof onScroll !== \\\"function\\\")\\n            onScroll.stop();\\n        cancelAnimationFrame(onLoadProcesss);\\n        /**\\n         * Check if we even have any handlers for this container.\\n         */\\n        const containerHandlers = onScrollHandlers.get(container);\\n        if (!containerHandlers)\\n            return;\\n        containerHandlers.delete(containerHandler);\\n        if (containerHandlers.size)\\n            return;\\n        /**\\n         * If no more handlers, remove the scroll listener too.\\n         */\\n        const listener = scrollListeners.get(container);\\n        scrollListeners.delete(container);\\n        if (listener) {\\n            getEventTarget(container).removeEventListener(\\\"scroll\\\", listener);\\n            (_a = resizeListeners.get(container)) === null || _a === void 0 ? void 0 : _a();\\n            window.removeEventListener(\\\"resize\\\", listener);\\n        }\\n    };\\n}\\n\\nexports.scroll = scroll;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"tslib\",\"index\",\"info\",\"onScrollHandler\",\"scrollListeners\",\"WeakMap\",\"resizeListeners\",\"onScrollHandlers\",\"scroll\",\"onScroll\",\"_a\",\"container\",\"document\",\"documentElement\",\"options\",\"__rest\",\"containerHandlers\",\"get\",\"Set\",\"set\",\"info$1\",\"createScrollInfo\",\"containerHandler\",\"createOnScrollHandler\",\"add\",\"has\",\"listener\",\"time\",\"performance\",\"now\",\"handler\",\"measure\",\"update\",\"notify\",\"target\",\"window\",\"addEventListener\",\"passive\",\"resize\",\"onLoadProcesss\",\"requestAnimationFrame\",\"stop\",\"cancelAnimationFrame\",\"delete\",\"size\",\"removeEventListener\"]\n}\n"]