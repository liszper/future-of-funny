shadow$provide.module$node_modules$engine_DOT_io_parser$build$cjs$encodePacket_browser=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});const commons_js_1=require("module$node_modules$engine_DOT_io_parser$build$cjs$commons"),withNativeBlob="function"===typeof Blob||"undefined"!==typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),withNativeArrayBuffer="function"===typeof ArrayBuffer,encodeBlobAsBase64=(data,callback)=>{const fileReader=
new FileReader;fileReader.onload=function(){const content=fileReader.result.split(",")[1];callback("b"+content)};return fileReader.readAsDataURL(data)};exports.default=({type,data},supportsBinary,callback)=>{if(withNativeBlob&&data instanceof Blob)return supportsBinary?callback(data):encodeBlobAsBase64(data,callback);var JSCompiler_temp;if(JSCompiler_temp=withNativeArrayBuffer)(JSCompiler_temp=data instanceof ArrayBuffer)||(JSCompiler_temp="function"===typeof ArrayBuffer.isView?ArrayBuffer.isView(data):
data&&data.buffer instanceof ArrayBuffer);return JSCompiler_temp?supportsBinary?callback(data):encodeBlobAsBase64(new Blob([data]),callback):callback(commons_js_1.PACKET_TYPES[type]+(data||""))}}
//# sourceMappingURL=module$node_modules$engine_DOT_io_parser$build$cjs$encodePacket_browser.js.map
