{
"version":3,
"file":"module$node_modules$engine_DOT_io_client$build$cjs$contrib$parseuri.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/engine_DOT_io-client/build/cjs/contrib/parseuri.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$engine_DOT_io_client$build$cjs$contrib$parseuri\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parse = void 0;\n// imported from https://github.com/galkn/parseuri\n/**\n * Parses an URI\n *\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\n * @api private\n */\nconst re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\nconst parts = [\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\n];\nfunction parse(str) {\n    const src = str, b = str.indexOf('['), e = str.indexOf(']');\n    if (b != -1 && e != -1) {\n        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n    }\n    let m = re.exec(str || ''), uri = {}, i = 14;\n    while (i--) {\n        uri[parts[i]] = m[i] || '';\n    }\n    if (b != -1 && e != -1) {\n        uri.source = src;\n        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n        uri.ipv6uri = true;\n    }\n    uri.pathNames = pathNames(uri, uri['path']);\n    uri.queryKey = queryKey(uri, uri['query']);\n    return uri;\n}\nexports.parse = parse;\nfunction pathNames(obj, path) {\n    const regx = /\\/{2,9}/g, names = path.replace(regx, \"/\").split(\"/\");\n    if (path.slice(0, 1) == '/' || path.length === 0) {\n        names.splice(0, 1);\n    }\n    if (path.slice(-1) == '/') {\n        names.splice(names.length - 1, 1);\n    }\n    return names;\n}\nfunction queryKey(uri, query) {\n    const data = {};\n    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\n        if ($1) {\n            data[$1] = $2;\n        }\n    });\n    return data;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","queryKey","uri","query","data","replace","$0","$1","$2","Object","defineProperty","value","parse","re","parts","str","src","b","indexOf","e","substring","length","m","exec","i","source","host","authority","ipv6uri","names","path","regx","split","slice","splice","pathNames"]
}
