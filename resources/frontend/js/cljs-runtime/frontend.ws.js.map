{"version":3,"sources":["frontend/ws.cljs"],"mappings":";;;AAQA,AAEA,AAAKA,sBAAQ,gDAAA,hDAACC;AAEd,AAAKC,qBAAO,gDAAA,hDAACD;AAEb,yBAAA,zBAAME,0DAAOC,EAAEC;AAAf,AACE,OAAA,AAAAC,gBAAQJ,yBAAOE,EAAE,AAACG,wBAAQ,uDAAA,vDAACC,6GAAgBH;;AAE7C,sBAAA,tBAAMI,oDAASC;AAAf,AACE,AAACC,sBAAOX,oBAAQ,sEAAA,jEAAKY;;AACrB,AAACD,sBAAOT,mBAAO,AAAA,AAAAI,4CAAA,5BAAUN;;AACzB,AAAA,AAAAM,gBAAQN,0BAAQ,WAAKa;AAAL,AAAU,oBAAIA;AAAI,gHAAA,zGAACC,mHAAkBD;;AAAK,gHAAA,zGAACC;;;;AAC3D,OAAA,AAAAR,uCAAA,vBAAMJ,iCACD;AAAA,AACE,AAAA,AACE,wDAAA,jDAAK,AAAA,AAAA,AAAAI,gBAAKJ,0CAEL,WAAKa;AAAL,AACE,IAAAC,aAAY,iBAAA,AAAM,OAACK,sDAAY,AAACC,8CAAMC,cAAI,AAACC,eAAK,AAAQT;gBAA5C,GAAA,CAAAG,kBAAAC;AAAA,IAAAC,mBAAAF;AAAA,AAAA,OAAAJ,yGAAA,UAAAM;;AAAA,AAAA,MAAAF;;;;QAAZ,AAAAD,4CAAAD,WAAA,IAAA,/DAAOZ;QAAP,AAAAa,4CAAAD,WAAA,IAAA,/DAASX;IACHoB,OAAK,iBAAA,AAAM,OAACE,uBAAO,uDAAA,vDAACC,6GAAgBvB;gBAA/B,GAAA,CAAAqB,kBAAAP;AAAA,IAAAC,mBAAAM;AAAA,AAAA,OAAAZ,yGAAA,UAAAM;;AAAA,AAAA,MAAAM;;;;AADX,AAEE,IAAAG,WAAM,AAAQd;AAAd,AAAA,QAAAc;KAAA;AACY,IAAAC,WAAA,2CAAA,gEAAA,LAAmBL,0EAAmBrB;AAAtC,AAAA,sFAAA0B,8BAAAA,5GAACpB,wCAAAA,kDAAAA;;;;AACX,gHAAA,zGAACI,oHAAmB,AAACiB,mDAAQhB","names":["frontend.ws/manager","reagent.core.atom","frontend.ws/socket","frontend.ws/send!","k","v","cljs.core/deref","cognitect.transit/write","cognitect.transit.writer","frontend.ws/connect","handler","cljs.core/reset!","js/module$node_modules$socket_DOT_io_client$build$cjs$index.Manager","err","cljs.core.println","message","vec__48865","cljs.core.nth","e48869","js/Error","e__29854__auto__","cljs.reader.read_string","cljs.core.apply","cljs.core/str","cljs.core/rest","data","e48870","cognitect.transit/read","cognitect.transit.reader","G__48871","G__48875","cljs.core.js__GT_clj"],"sourcesContent":["(ns frontend.ws\n  (:require [reagent.core :as reagent :refer [atom]]\n            [cognitect.transit :as t]\n            [\"@chakra-ui/react\" :as ui]\n            [cljs.reader :refer [read-string]]\n            [macros :refer [safe safe-await]]\n            [\"socket.io-client\" :as io]))\n\n(set! *warn-on-infer* false)\n\n(def manager (atom nil))\n\n(def socket (atom nil))\n\n(defn send! [k v]\n  (.emit @socket k (t/write (t/writer :json) v)))\n\n(defn connect [handler]\n  (reset! manager (new io/Manager \"ws://localhost:8080\"))\n  (reset! socket (.socket @manager \"/\"))\n  (.open @manager (fn [err] (if err (println \"Error: \" err) (println \"Successful websocket connection.\"))))\n  (.on @socket \"connect\"\n       (fn []\n         (let []\n           (.on (.. @socket -io -engine)\n                \"packet\"\n                (fn [message]\n                  (let [[k v] (safe (read-string (apply str (rest (.-data message)))))\n                        data (safe (t/read (t/reader :json) v))]\n                    (case (.-type message)\n                      \"message\" (handler {:message data :message-type k})\n                      (println \"packet: \" (js->clj message))))))))))"]}