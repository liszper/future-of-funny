{
"version":3,
"file":"module$node_modules$focus_lock$dist$es5$setFocus.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,gDAAA,CAAqE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAE7GC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAQI,CAAAA,QAAR,CAAmBJ,OAAQK,CAAAA,OAA3B,CAAqC,IAAK,EAC1C,KAAIC,aAAeR,OAAA,CAAQ,oDAAR,CASnBE,QAAQK,CAAAA,OAAR,CARcA,QAAS,CAACE,MAAD,CAASC,YAAT,CAAuB,CACtC,OAAJ,EAAeD,OAAf,EACIA,MAAOE,CAAAA,KAAP,CAAaD,YAAb,CAEA,gBAAJ,EAAuBD,OAAvB,EAAiCA,MAAOG,CAAAA,aAAxC,EACIH,MAAOG,CAAAA,aAAcD,CAAAA,KAArB,EALsC,CAS9C,KAAIE,WAAa,CAAjB,CACIC,aAAe,CAAA,CA8BnBZ,QAAQI,CAAAA,QAAR,CAtBeA,QAAS,CAACS,OAAD;AAAUC,QAAV,CAAoBC,OAApB,CAA6B,CACjC,IAAK,EAArB,GAAIA,OAAJ,GAA0BA,OAA1B,CAAoC,EAApC,CACIC,QAAAA,CAAY,GAAIV,YAAaW,CAAAA,aAAjB,EAAgCJ,OAAhC,CAAyCC,QAAzC,CACZF,EAAAA,YAAJ,EAGII,OAHJ,GAIqB,CAAjB,CAAIL,UAAJ,EAEIO,OAAQC,CAAAA,KAAR,CAAc,mJAAd,CAGA,CADAP,YACA,CADe,CAAA,CACf,CAAAQ,UAAA,CAAW,QAAS,EAAG,CACnBR,YAAA,CAAe,CAAA,CADI,CAAvB,CAEG,CAFH,CALJ,GAUAD,UAAA,EAEA,CADA,GAAIX,OAAQK,CAAAA,OAAZ,EAAqBW,OAAUK,CAAAA,IAA/B,CAAqCN,OAAQP,CAAAA,YAA7C,CACA,CAAAG,UAAA,EAZA,CAJJ,CAHiD,CAvBwD;",
"sources":["node_modules/focus-lock/dist/es5/setFocus.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$focus_lock$dist$es5$setFocus\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setFocus = exports.focusOn = void 0;\nvar focusMerge_1 = require(\"./focusMerge\");\nvar focusOn = function (target, focusOptions) {\n    if ('focus' in target) {\n        target.focus(focusOptions);\n    }\n    if ('contentWindow' in target && target.contentWindow) {\n        target.contentWindow.focus();\n    }\n};\nexports.focusOn = focusOn;\nvar guardCount = 0;\nvar lockDisabled = false;\n/**\n * Sets focus at a given node. The last focused element will help to determine which element(first or last) should be focused.\n * HTML markers (see {@link import('./constants').FOCUS_AUTO} constants) can control autofocus\n * @param topNode\n * @param lastNode\n * @param options\n */\nvar setFocus = function (topNode, lastNode, options) {\n    if (options === void 0) { options = {}; }\n    var focusable = (0, focusMerge_1.getFocusMerge)(topNode, lastNode);\n    if (lockDisabled) {\n        return;\n    }\n    if (focusable) {\n        if (guardCount > 2) {\n            // tslint:disable-next-line:no-console\n            console.error('FocusLock: focus-fighting detected. Only one focus management system could be active. ' +\n                'See https://github.com/theKashey/focus-lock/#focus-fighting');\n            lockDisabled = true;\n            setTimeout(function () {\n                lockDisabled = false;\n            }, 1);\n            return;\n        }\n        guardCount++;\n        (0, exports.focusOn)(focusable.node, options.focusOptions);\n        guardCount--;\n    }\n};\nexports.setFocus = setFocus;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","setFocus","focusOn","focusMerge_1","target","focusOptions","focus","contentWindow","guardCount","lockDisabled","topNode","lastNode","options","focusable","getFocusMerge","console","error","setTimeout","node"]
}
